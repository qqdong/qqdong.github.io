<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[单点登录与权限管理本质：HTTP重定向]]></title>
      <url>https://qqdong.github.io/2018/02/28/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%9C%AC%E8%B4%A8%E4%B9%8B%E4%BA%8C%EF%BC%9A%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      <content type="html"><![CDATA[<p>继续介绍「单点登录与权限管理」系列的第一部分：单点登录与权限管理本质，本篇说说HTTP重定向，它也是完成单点登录的基础知识。</p>
<p>该系列的完整写作计划，可见文章：<a href="http://qqidol.com/2018/02/27/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%9C%AC%E8%B4%A8%E4%B9%8B%E4%B8%80%EF%BC%9Asession%E4%B8%8Ecookie%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">系列概述</a></p>
<p>单点登录需要在多个web项目之间相互跳转，使用重定向技术，自动完成登录操作。另外，当实际资源被迁移到其他URL时，可使用重定向技术，将访问原有URL的请求，自动跳转到新URL，保持原有URL有效。</p>
<p>本篇主要从以下几个方面介绍：</p>
<ul>
<li>重定向基本概念</li>
<li>Nginx重定向</li>
<li>Servlet重定向</li>
<li>Spring使用重定向</li>
</ul>
<a id="more"></a>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h5><p>在HTTP协议中，服务器通过发送特定的响应实现重定向，浏览器在接收到响应后，可根据状态码判定重定向，并使用指定的新URL重新请求。重定向的响应状态码为3xx，不同的状态码表示不同的重定向类型。</p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15198241887086.jpg" alt="重定向的基本原理"> </p>
<p>浏览器从响应头中的Location获取新的URL，重新发送请求。</p>
<h5 id="重定向类型"><a href="#重定向类型" class="headerlink" title="重定向类型"></a>重定向类型</h5><p>重定向类型包括永久重定向、临时重定向、特殊重定向，不同的重定向类型，一方面会影响浏览器的操作，一方面会影响搜索引擎的收录。</p>
<p>永久重定向，是指原URL不再被使用，应优先选择新的URL，搜索引擎机器人会在遇到该状态码时，触发更新操作，使用新的URL。常见的状态码有301，Moved Permanently。</p>
<p>临时重定向，如果请求的资源临时不可用，但可从其他地方访问。搜索引擎不会记录该临时的链接。常见的状态码有302 Found，307 Temporary Redirect。</p>
<p>特殊重定向，304 Not Modified 资源未被修改，会从本地缓存中获取网页；300 Multiple Choice，是一种手工重定向，用户可选择重定向的页面。</p>
<h5 id="设置重定向方法"><a href="#设置重定向方法" class="headerlink" title="设置重定向方法"></a>设置重定向方法</h5><p>除了上面介绍的重定向方法，还可以通过HTML的metay元素，或者JS实现重定向，但还是建议优先选择上面介绍方法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;URL=https://www.mi.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>content属性值，第一个数字表示等待多少秒后进行跳转。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location = <span class="string">"https://www.mi.com"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="Nginx重定向"><a href="#Nginx重定向" class="headerlink" title="Nginx重定向"></a>Nginx重定向</h4><h5 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h5><p>nginx的rewrite主要功能就是实现URL的重定向，其语法规则如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span> &lt;regex&gt; &lt;replacement&gt; [flag]</span><br></pre></td></tr></table></figure>
<p>regex 正则匹配需要重定向的url<br>replacement 替换内容，将正则匹配的内容替换成replacement<br>flag 标记，具体如下：</p>
<ul>
<li>last：本条规则匹配之后，继续向下匹配新的rewrite；</li>
<li>break：本条规则匹配完成即终止，后面的规则不再匹配；</li>
<li>redirect：返回302临时重定向；</li>
<li>permanent：返回301永久重定向；</li>
</ul>
<p>rewirte参数的标签段位置：server,location,if</p>
<h5 id="rewrite示例"><a href="#rewrite示例" class="headerlink" title="rewrite示例"></a>rewrite示例</h5><p>将 mi.com 重定向 www.mi.com</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> mi.com;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> http://www.mi.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="return"><a href="#return" class="headerlink" title="return"></a>return</h5><p>可通过return直接重定向，如下：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">	<span class="attribute">server_name</span> example.com;</span><br><span class="line">	<span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://www.mi.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Servlet重定向"><a href="#Servlet重定向" class="headerlink" title="Servlet重定向"></a>Servlet重定向</h4><p>首先要区分开转发和重定向的概念，转发是在服务端完成的，浏览器地址栏中的地址不会改变，是一次请求；重定向是在浏览器端完成的，浏览器地址栏会变化，是二次请求。</p>
<p>无论是转发还是重定向，在执行方法前，不要向客户端输出内容.</p>
<h5 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException </span>&#123; </span><br><span class="line">    response.setContentType(<span class="string">"text/html; charset=utf-8"</span>); </span><br><span class="line">    ServletContext sc = getServletContext();    </span><br><span class="line">    RequestDispatcher dispatcher = <span class="keyword">null</span>; </span><br><span class="line">    dispatcher = sc.getRequestDispatcher(<span class="string">"index.jsp"</span>);              </span><br><span class="line">    dispatcher.forward(request, response); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException,IOException </span>&#123; </span><br><span class="line">    response.setContentType(<span class="string">"text/html; charset=utf-8"</span>); </span><br><span class="line">    response.sendRedirect(<span class="string">"/index.jsp"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Spring使用重定向"><a href="#Spring使用重定向" class="headerlink" title="Spring使用重定向"></a>Spring使用重定向</h4><h5 id="不带参数"><a href="#不带参数" class="headerlink" title="不带参数"></a>不带参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"redirect:/toList"</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/toList"</span>;</span><br></pre></td></tr></table></figure>
<h5 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(RedirectAttributes attributes)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    attributes.addAttribute(<span class="string">"hello"</span>, <span class="string">"hello"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/toList"</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样会在重定向后的url中自动追加参数。</p>
<p>Spring MVC 3.1 版本添加了一个新特性，Flash属性，可以实现传递参数，并且可以解决重复提交的问题。</p>
<p>一个正常的Controller处理时，处理完成之后，会被forward到一个操作成功的页面，如果用户按F5，就会再次提交一遍，如果使用redirect，就可以避免这个问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(RedirectAttributes attributes)</span>  </span>&#123;  </span><br><span class="line">    attributes.addFlashAttribute(<span class="string">"hello"</span>, <span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/toList"</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> 单点登录与权限管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 重定向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[单点登录与权限管理本质：session和cookie介绍]]></title>
      <url>https://qqdong.github.io/2018/02/27/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%9C%AC%E8%B4%A8%E4%B9%8B%E4%B8%80%EF%BC%9Asession%E4%B8%8Ecookie%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>本篇开始写「单点登录与权限管理」系列的第一部分：单点登录与权限管理本质，这部分主要介绍相关的知识概念、抽象的处理过程、常见的实现框架。通过这部分的介绍，能够对单点登录与权限管理有整体上的了解，对其相关概念、处理流程、常见实现有个基本的认识。</p>
<p>本篇文章介绍下session和cookie，它是登录实现的基础，主要从下面几个方面介绍：</p>
<ul>
<li>session和cookie基本概念</li>
<li>session的生命周期</li>
<li>cookie的作用域</li>
</ul>
<a id="more"></a>
<p>cookie的跨域问题会在后续文章单独介绍。</p>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>大部分系统都需要识别用户的身份，有些功能只有特定的用户能使用，有些功能需要根据用户身份显示不同的内容，一般使用唯一编号标识用户的身份。</p>
<p>就像我们的身份证，身份证号是每个人唯一的，根据所在的省市区、出生年月、性别等规则生成，我们去政府机构办事时，都需要带着身份证，他们通过身份证验证我们的身份。</p>
<p>session和cookie主要用来识别登录者身份的，默认通过JSESSIONID唯一编号进行验证。session是在服务端保存的一个数据结构，用来跟踪用户的状态，也可以保存用户相关的一些数据，可以保存在内存、缓存、数据库等存储结构中。cookie是客户端保存用户信息的一种机制。</p>
<h5 id="servlet-session"><a href="#servlet-session" class="headerlink" title="servlet session"></a>servlet session</h5><p>javax.servlet.http包中是session的主要API接口，主要有以下几种接口：</p>
<ul>
<li>HttpSession：实际的session接口定义；</li>
<li>Listener：session发生一些动作，如创建，设置属性，失效等，会触发一些事件，进行相应的处理；</li>
<li>Event：当动作触发之后，封装为对应的事件；</li>
</ul>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15197373913600.jpg" alt="Session相关接口"></p>
<p>session相关的接口，一般由应用服务器来实现，比如Tomcat、Resin、Jetty。Session的主要特征：</p>
<ul>
<li>可以设置和获取一些属性；</li>
<li>每个session对应一个编号sessionId，是一次会话的唯一表示；</li>
<li>session有超时时间，用户长时间无操作，维护的定时器会清除session，保证资源及时释放；</li>
<li>可以通过调用invalidate方法主动清除session；</li>
</ul>
<p>在tomcat中，HttpSession的实现是StandardSession，同时StandardSession会实现自定义的Session接口，它是对HttpSesion一个包装。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15197384987063.jpg" alt="Tomcat Sesion接口"></p>
<p>另外，tomcat会实现session的管理和持久化，可随时获取到对应的session，具体实现不在本篇分析，网上有很多文章介绍。</p>
<h5 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h5><p>cookie是客户端的解决方案，是服务器发给客户端的特殊信息，这些信息以文本文件的方式存放在客户端，后续请求，客户端都会带上这些特殊的信息。</p>
<p>服务端通过HTTPResponse设置cookie到响应头，发送到客户端，后续客户端自动将cookie信息设置到请求头。下面是我登录百度后的cookie信息：<br><img src="http://oc3r3rke2.bkt.clouddn.com/15197400794162.jpg" alt="百度cookie信息"></p>
<p>cookie也有失效时间，可在服务端通过cookie.setMaxAge(expiry)进行设置，expiry=-1：代表浏览器关闭后，cookie就失效了；expiry&gt;0：代表会将cookie保存到硬盘中，直到设置时间过期才会被浏览器自动删除；expiry=0：删除cookie，cookie都会被浏览器给删除。</p>
<p>另外还有其他几个特性：</p>
<ul>
<li>setDomain：设置cookie范围，后面会详细介绍；</li>
<li>isHttpOnly：是否只是http协议使用。只能在后端通过getCookies()获取，js不能获取；</li>
<li>每一个cookie文件大小：4kb ， 如果超过4kb浏览器不识别；</li>
<li>cookie不安全，可能泄露用户信息，浏览器支持禁用cookie操作；</li>
<li>临时session：默认生命周期，当浏览器关闭时cookie销毁的；</li>
</ul>
<h5 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h5><p><img src="http://oc3r3rke2.bkt.clouddn.com/15197427091558.jpg" alt="交互过程图"></p>
<ol>
<li>使用浏览器访问服务端页面；</li>
<li>服务端收到该客户端第一次请求后，会创建一个session，生产一个唯一sessionId；</li>
<li>同时在响应请求中设置cookie，属性名为jessionid；</li>
<li>客户端收到后会保存jessionid，再次请求时，会在header中设置，服务端可从请求头中获取；</li>
<li>服务端验证获取的sessionId是否存在，即可验证是否是同一用户；</li>
</ol>
<blockquote>
<p>当浏览器禁用cookie后，基于cookie的session将不能正常工作，每次都将创建一个新的session，可通过url重写传递jsessionid。</p>
</blockquote>
<h4 id="session的生命周期"><a href="#session的生命周期" class="headerlink" title="session的生命周期"></a>session的生命周期</h4><p>session存储在服务器端，session在用户第一次访问时创建，访问jsp、servlet等程序时才会创建Session，只访问html、image等静态资源并不会创建，可调用request.getSession(true)强制生成Session。</p>
<p>服务器会把长时间没有活动的Session从内存中清除，tomcat中session的默认失效时间为20分钟，可调用调用session的invalidate方法强制清楚。</p>
<p>另外，我们可以自己实现session生命周期的管理，以满足特定的业务需求，比如后续要讲的单点登录、分布式session等，tomcat可提供了相应扩展，后续文章会介绍。</p>
<h4 id="cookie的作用域"><a href="#cookie的作用域" class="headerlink" title="cookie的作用域"></a>cookie的作用域</h4><p>创建cookie时，需要设置domain，有多级域名时，可以控制cookie的作用域。如果网站请求量很大，设置的cookie作用域不当，会浪费很多流量。</p>
<p>下面举例说明，比如有三级域名support.kefu.mi.com，其中，mi.com是一级域名，kefu.mi.com是二级域名。</p>
<p>在3类域名下进行cookie设置，分别设置不同的domain，看看访问各级域名时cookie的有效性。当domain设置为空时，domain默认为当前域名。</p>
<h5 id="在一级域名mi-com下设置cookie"><a href="#在一级域名mi-com下设置cookie" class="headerlink" title="在一级域名mi.com下设置cookie"></a>在一级域名mi.com下设置cookie</h5><table>
<thead>
<tr>
<th>domain参数</th>
<th>访问一级</th>
<th>访问二级</th>
<th>访问三级</th>
</tr>
</thead>
<tbody>
<tr>
<td>空</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>mi.com</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>kefu.mi.com</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>mcc.kefu.mi.com</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>当domain为一级域名时，一级域名、包括其下的子域名都可以接收到cookie。但是domain参数设置其子域名时，所有域名就接收不到了，包括那个子域名。</p>
<h5 id="在二级域名kefu-mi-com下设置cookie"><a href="#在二级域名kefu-mi-com下设置cookie" class="headerlink" title="在二级域名kefu.mi.com下设置cookie"></a>在二级域名kefu.mi.com下设置cookie</h5><table>
<thead>
<tr>
<th>domain参数</th>
<th>访问一级</th>
<th>访问二级</th>
<th>访问三级</th>
</tr>
</thead>
<tbody>
<tr>
<td>空</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>mi.com</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>kefu.mi.com</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>mcc.kefu.mi.com</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>当domain为自身域名时，其父域名无法接收到cookie，其本身与其子域名可以接收到cookie。而设置其子域名或其他域名时，所有域名都接收不到cookie。</p>
<h5 id="在三级域名mcc-kefu-mi-com下设置cookie"><a href="#在三级域名mcc-kefu-mi-com下设置cookie" class="headerlink" title="在三级域名mcc.kefu.mi.com下设置cookie"></a>在三级域名mcc.kefu.mi.com下设置cookie</h5><table>
<thead>
<tr>
<th>domain参数</th>
<th>访问一级</th>
<th>访问二级</th>
<th>访问三级</th>
</tr>
</thead>
<tbody>
<tr>
<td>空</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>mi.com</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>kefu.mi.com</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>mcc.kefu.mi.com</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
<p>可以得出结论：domain参数可以设置父域名以及自身，但不能设置其它域名，包括子域名，否则cookie不起作用。</p>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> 单点登录与权限管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> session </tag>
            
            <tag> cookie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[走走初春的北京]]></title>
      <url>https://qqdong.github.io/2018/02/25/%E8%B5%B0%E8%B5%B0%E5%88%9D%E6%98%A5%E7%9A%84%E5%8C%97%E4%BA%AC/</url>
      <content type="html"><![CDATA[<blockquote>
<p>图片比较多，移动网络请注意流量。</p>
</blockquote>
<p>老丈人因为家里的一些事情来到了北京，今天周末，正好休息，陪他转一天，前两天好多地方已经去过了，今天就去了清华、北大、颐和园，正好都在一起，比较方便。</p>
<p>为了赶时间，早上7点就起床了，到清华西门后，人特别少，在门口大大方方的准备进去后，被门卫帅哥拦住了，「今天不开放」，尴尬的转身走去，原来学生这两天快开学了。</p>
<p>来了进不去觉得可惜，就通过其他渠道花了80元钱（3个人）进去了，慢悠悠的逛了几个有名的地方，清华园、清华学堂、图书馆、水木清华、牡丹园、绿园。</p>
<a id="more"></a>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195722982457.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195724883414.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195725072791.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195725606637.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195725665258.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195725825167.jpg" alt=""></p>
<p>清华西门出来后，直走去了北大西门，看了几个地方，未名湖、博雅塔、图书馆、第一教学楼、老建筑。</p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730285798.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730370756.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730488129.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730544427.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730657170.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730728249.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195730813528.jpg" alt=""></p>
<p>从北大东门出来后，打的直接去了颐和园东宫门，走走停停的看了几个地方，乐寿堂、邀月门、长廊、佛香阁、苏州街。</p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732274112.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732349081.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732428920.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732558929.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732615940.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732697321.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732757885.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732834284.jpg" alt=""></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15195732899225.jpg" alt=""></p>
<p>累了，马上休息了，晚安。</p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 北京 </tag>
            
            <tag> 初春 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「单点登录与权限管理」系列概述]]></title>
      <url>https://qqdong.github.io/2018/02/24/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<p>首先，感谢几位朋友在朋友圈转发我的文章，小声的告诉你们，是我主动让他们帮忙转发的：）在朋友们的分享下，凌晨推送的一篇文章，阅读人数达到了280多，很满足，我会坚持写下去，分享工作、学习、生活中的所思所想。</p>
<p>已关注的朋友们多给我点赞，给我一些动力：）</p>
<p>本来准备结合实际项目，写写netty系列，但后面一个月工作会比较忙，就决定写写和后面工作关联度大的技术，一边调研、实践，一边整理、分享给大家。</p>
<a id="more"></a>
<p>该系列主要以我们系统「单点登录与权限管理」的实现为主线，深入了解下CAS、Shiro，扩展了解下OAuth、Spring Security、Spring Session，计划内容如下：</p>
<ul>
<li>单点登录与权限管理本质</li>
<li>项目背景介绍</li>
<li>项目基本实现</li>
<li>由浅入深了解CAS</li>
<li>由浅入深了解Shiro</li>
<li>CAS和Shiro改造过程</li>
<li>了解和尝试OAuth</li>
<li>了解和尝试Spring Security</li>
<li>了解和尝试Spring Session</li>
</ul>
<p>其实，列出的这些技术点，我也没有深入了解过，但会尽力分享学习、实践的过程，大家多支持和包容。</p>
<p>这篇就不分享干货了，明天带家人去北大、清华、颐和园看看，多拍点照片出来，愁一愁开春的北京。</p>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> 单点登录与权限管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 单点登录 </tag>
            
            <tag> 权限管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「4+1视图」学习与理解]]></title>
      <url>https://qqdong.github.io/2018/02/23/4+1%E8%A7%86%E5%9B%BE%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>声明：部分内容摘录了简书「橘色对白」作者的文章片段。</p>
</blockquote>
<p>之前经常看到文章中提到「4+1视图」，对其也有片面的理解，但一直没有实践过，不清楚其真正的作用，这两天在业务需求分析中运用了其中的一部分，想谈谈自己的粗浅理解。 </p>
<p>最近在调研「多租户」实现方案时，看到简友「橘色对白」的3篇关于多租户架构的文章，其中一篇「<a href="https://www.jianshu.com/p/dfa73524efda" target="_blank" rel="noopener">以CRM系统为例，浅析初级SaaS架构的构建方法</a>」，以「4+1视图」的形式，覆盖了分析、设计、开发、部署等阶段，如何一步一步递进，形成最终的实施方案。</p>
<p>所谓「4+1视图」，是从5个不同视角来描述软件体系结构，包括场景视图、逻辑视图、开发视图、过程视图、物理视图，每个视图只关系系统的一个侧面，5个视图结合起来，才能反映系统的全部内容。</p>
<a id="more"></a>
<p>好吧，语气还是有点官方了，本来想根据自己项目再分析一遍，有人又在催我睡觉了，同时觉得「橘色对白」的这篇文章写的很不错了，决定整理下分享出来。</p>
<p>在分享之前，说说我的实践，通过场景视图、逻辑视图，分析出了「多租户」改造时，需要的功能列表。场景视图站在使用系统的角度，分析各个角色的用例。 逻辑视图站在业务对象的角度，表达了业务对象和对象间的关系。两个视图相互递进和补充，帮助我更完整的梳理出系统的功能点。</p>
<p>下面分享下「橘色对白」的这篇文章，如何一步步构建CRM系统</p>
<h4 id="一、场景视图"><a href="#一、场景视图" class="headerlink" title="一、场景视图"></a>一、场景视图</h4><p>负责从用户角度，识别业务需求，描述业务场景，是架构设计的起点和终点。</p>
<h5 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h5><p>老板角度：了解客户增减数量；了解客户增减变化趋势；商务行程管理。</p>
<p>员工角度：保存和随时查阅客户资料；通过邮件、IM、IP电话与客户保持及时沟通；商务行程管理。</p>
<h5 id="场景抽象"><a href="#场景抽象" class="headerlink" title="场景抽象"></a>场景抽象</h5><p>客户管理：增、删、改、查，客户资料；<br>行程管理：商务形成安排（客户拜访、合同谈判）；<br>订单管理：已签订单的管理；</p>
<h4 id="二、逻辑视图"><a href="#二、逻辑视图" class="headerlink" title="二、逻辑视图"></a>二、逻辑视图</h4><p>从对象角度，构建对象模型，用以确立逻辑分层、模块划分、模块功能、模块间依赖关系等。其中，模块功能，既包括可见的业务功能，也包括不可见的系统功能（日志、权限、事务等）。</p>
<h5 id="模块划分及功能"><a href="#模块划分及功能" class="headerlink" title="模块划分及功能"></a>模块划分及功能</h5><p>客户模块、行程模块、订单模块、报表模块</p>
<h5 id="模块依赖关系"><a href="#模块依赖关系" class="headerlink" title="模块依赖关系"></a>模块依赖关系</h5><p><img src="http://oc3r3rke2.bkt.clouddn.com/15193963712371.jpg" alt="模块依赖关系"></p>
<h5 id="模块包含的业务对象"><a href="#模块包含的业务对象" class="headerlink" title="模块包含的业务对象"></a>模块包含的业务对象</h5><ul>
<li>客户模块 — 客户分组、客户、联系人；</li>
<li>行程模块 — 时间、事项等；</li>
<li>订单模块 — 时间、客户、订单等；</li>
<li>报表模块 — ……</li>
</ul>
<h4 id="三、开发视图"><a href="#三、开发视图" class="headerlink" title="三、开发视图"></a>三、开发视图</h4><p>从开发角度，描述软件在开发环境下的静态组织（程序包、应用的统一框架、引用的类库、SDK和中间件等），并规范和约束开发环境的结构。</p>
<h5 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h5><ul>
<li>开发语言：Java、JavaScript、Html</li>
<li>数据库类型：MySQL 5.0</li>
<li>应用服务器类型：Apache+JBOSS</li>
<li>其他软件：Ant、JUnit 等</li>
<li>相关硬件：略</li>
</ul>
<h5 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h5><p>开源框架：Struts+Spring+Hibernate框架结构<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193965756550.jpg" alt="调用视图"></p>
<h5 id="分层策略"><a href="#分层策略" class="headerlink" title="分层策略"></a>分层策略</h5><p><img src="http://oc3r3rke2.bkt.clouddn.com/15193966269601.jpg" alt="分层策略"></p>
<h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p>根据分层，制定目录结构如下<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193966752088.jpg" alt="目录结构"></p>
<ul>
<li>Api: 存放service的接口定义源文件；</li>
<li>Action: 存放action的源文件和配置文件；</li>
<li>Biz: 存放各模块的业务逻辑组件和DAO组件；</li>
<li>Bundle: 存放JSP和HTML文件；</li>
<li>deploy：存放构建后待部署的jar文件；</li>
<li>biz目录下根据模块再分为dao和service目录，以及它们的实现类目录impl；</li>
</ul>
<h4 id="四、过程视图"><a href="#四、过程视图" class="headerlink" title="四、过程视图"></a>四、过程视图</h4><p>从过程角度，描述系统的并发和同步设计。旨在解决进程、线程、并发、同步、通信等方面的问题；</p>
<h4 id="五、物理视图"><a href="#五、物理视图" class="headerlink" title="五、物理视图"></a>五、物理视图</h4><p>负责从部署角度，描述软硬件的映射关系，以及系统在分布/部署上的设计。旨在解决系统安装、系统部署、网络分布等问题。</p>
<p>至此，CRM系统已基本成型。</p>
<blockquote>
<p>理论很重要，更重要的是去实践，在实践的过程中，才能够真正理解理论中每个字的精华。<br>我理解的还很浅，先欠个账，后续项目开发过程中，完整应用「4+1视图」后，我在做个实践总结。</p>
</blockquote>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> 软件工程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 4+1视图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的常用工具集]]></title>
      <url>https://qqdong.github.io/2018/02/22/%E6%88%91%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>今天年后第一天上班，去年会有公司高管在门口发红包，本来想早点去公司，但还是晚到20分钟，错失了我的大红包 ：）。上午一直不在状态，可能是所谓的节后综合征，下午慢慢好起来，调研和整理了 「多租户的实现方案」。</p>
<p>今天想说说我的常用工具集，主要是mac上的工具，希望大家有喜欢的。如果有更好用的，大家可以在留言区留言，让更多的人知道。</p>
<p>16年初来到小米后，标配是双显示器，配置是8核16G内存，系统推荐使用ubuntu，之后就一直用这个。但我们的项目有好多子项目，每次在本地调试时，会导致机器会非常卡，比较影响工作效率。</p>
<p>所以，今天又把我的mac笔记本带到公司了，分担一部分压力，以后会同时用公司电脑和mac上，分别显示在2个显示器上。</p>
<p>公司电脑只运行idea集成开发软件，mac上主要运行idea以外的所有的常用软件，比如微信、qq、文档工具、邮件客户端、xmind、笔记软件、浏览器等。</p>
<a id="more"></a>
<h5 id="2台电脑共用一套键鼠"><a href="#2台电脑共用一套键鼠" class="headerlink" title="2台电脑共用一套键鼠"></a>2台电脑共用一套键鼠</h5><p>通过「Synergy」软件可以很方便的实现共用一套键鼠，支持多个操作系统，我就是通过这个软件在ubuntu和mac上共用了一套键鼠的。</p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15193075772878.jpg" alt="Synergy软件"></p>
<p>如上图所示，配置对应的客户端和服务端，配置过程比较简单，我就不赘述了，大家可以在网上搜相关的安装、配置教程。配置过程中有问题可以留言评论，我会第一时间解答。</p>
<h5 id="知识管理-收藏"><a href="#知识管理-收藏" class="headerlink" title="知识管理 - 收藏"></a>知识管理 - 收藏</h5><p>看到好的文章，我会收藏起来，可以随时离线看，我目前使用「收趣」软件，app和web端支持的都比较好。我也是前段时间刚发现的，之前一直用pocket，但阅读体验不是特别好。</p>
<p>我总结下「收趣」的优点：</p>
<ul>
<li>手机端可随时收集到收趣app，pc端有chrome插件， 可以很方便的收集到收趣；</li>
<li>可以很方便的从其他软件批量导入，包括Pocket、微博、知乎、今日头条。</li>
<li>收藏的网页有很好的阅读体验；</li>
<li>可对收藏的网站进行识别，按网站来源进行归类；</li>
<li>便捷的自定义分类管理；</li>
<li>注重知识关联和分享，可查看其它网友收藏的好文章；</li>
</ul>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15193088227884.jpg" alt="批量导入"></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15193088744604.jpg" alt="收藏的文章列表"></p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15193089353224.jpg" alt="自定义分类"></p>
<h5 id="知识管理-个人知识库"><a href="#知识管理-个人知识库" class="headerlink" title="知识管理 - 个人知识库"></a>知识管理 - 个人知识库</h5><p>对于特别好的文章，我会记录阅读笔记。工作、学习过程中，会对调研的技术进行系列学习和总结。我使用「为知笔记」管理我的知识库，不过目前收费了，我已经付费使用1年多了，觉得很不错，特别是网页的剪辑和多级分类管理。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193113570918.jpg" alt="为知笔记"></p>
<h5 id="个人博客的工具集"><a href="#个人博客的工具集" class="headerlink" title="个人博客的工具集"></a>个人博客的工具集</h5><ul>
<li>使用hexo搭建我的个人博客，结合github pages进行托管，搭建过程很方便，可以访问我的博客看下效果：<a href="http://qqidol.com" target="_blank" rel="noopener">http://qqidol.com</a></li>
<li>使用markdown写博客，强烈推荐MWeb编辑器，真的特别好用。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193105542285.jpg" alt="MWeb软件"></li>
</ul>
<p>大家可以尝试使用hexo搭建个人博客，具体可以参考一位简书上的朋友的文章：<a href="https://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">https://www.jianshu.com/p/05289a4bc8b2</a></p>
<p>搭建过程中，有任何问题可以留言评论，我会及时解答。</p>
<h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><ul>
<li>文档工具：dash<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193099029949.jpg" alt="文档工具Dash"></li>
<li>在线api文档：oschina在线工具<br><a href="http://tool.oschina.net/apidocs" target="_blank" rel="noopener">http://tool.oschina.net/apidocs</a></li>
</ul>
<h5 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h5><ul>
<li>软件包管理工具：homebrew，特别强大</li>
<li>homebrew可视化工具：Cakebrew<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193104299106.jpg" alt="Cakebrew工具"></li>
<li>常用软件启动、停止管理工具：LaunchRocket<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193103846635.jpg" alt="LaunchRocket工具"></li>
</ul>
<h5 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h5><ul>
<li>终端工具使用iTerm2；</li>
<li>使用zsh替换bash，可以使用Oh My ZSH!工具；</li>
<li>使用tmux进行多窗口管理；<br><img src="http://oc3r3rke2.bkt.clouddn.com/15193108108055.jpg" alt="tmux多窗口工具"></li>
</ul>
<h5 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h5><ul>
<li>思维导图：xmind</li>
<li>流程图工具：gliffy、staruml</li>
<li>网络抓包工具：Wireshark、Charles</li>
<li>HTTP客户端工具：Postman</li>
<li>免费翻墙工具：Lantern，每月有免费流量，基本的网页搜索够用了。</li>
</ul>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《深入实践Spring Boot》阅读笔记之三：核心技术源代码分析]]></title>
      <url>https://qqdong.github.io/2018/02/21/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5Spring%20Boot%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%B8%89%EF%BC%9A%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>刚关注的朋友，可以回顾前两篇文章：</p>
<ul>
<li><a href="http://qqidol.com/2018/02/19/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5Spring%20Boot-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/" target="_blank" rel="noopener">基础应用开发</a></li>
<li><a href="http://qqidol.com/2018/02/20/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5Spring%20Boot%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">分布式应用开发</a></li>
</ul>
<p>上篇文章总结了《深入实践Spring Boot》的第二部分，本篇文章总结第三部分，也是最后一部分。这部分主要讲解核心技术的源代码分析，因为篇幅和能力原因，分析的不会太详细，后续深入研究后再专门写文章。希望大家能从「阅读笔记」3篇文章中，对Spring Boot提供的功能有所了解，在项目中进行实践，不断从繁琐重复的开发中解放出来。</p>
<p>我也是最近刚开始了解Spring Boot，计划今年在项目中实践，到时会总结实践过程中的一些问题和经验，分享给大家。想一起学习、实践、交流的朋友，可以扫描文章下方的二维码，关注我的个人公众号，感谢大家。</p>
<p>本篇主要从以下几个方面总结：</p>
<ul>
<li>Spring Boot自动配置实现原理；</li>
<li>Spring Boot数据访问实现原理；</li>
<li>微服务核心技术实现原理；</li>
</ul>
<a id="more"></a>
<h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>春节假期很快过去了，明天就要上班了，相信大家还是意犹未尽，没吃够、没玩够、没和家人待够。今年因为个人原因，没有回家过年，心理最牵挂的还是爷爷奶奶，他们都80多了，希望她们身体健康，开开心心地度过生命最后的旅程。</p>
<p>不管怎样，大家要切换频道了，回归到正常的工作中，好好努力，一起期待明年和家人更好的团聚。</p>
<h4 id="Spring-Boot自动配置实现原理"><a href="#Spring-Boot自动配置实现原理" class="headerlink" title="Spring Boot自动配置实现原理"></a>Spring Boot自动配置实现原理</h4><p>使用Spring Boot创建一个简单的Web项目很简洁，不需要太多配置，编写一个简单的主程序就行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="主程序分析"><a href="#主程序分析" class="headerlink" title="主程序分析"></a>主程序分析</h5><p>首先分析下run方法（省略不关键的部分代码）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">		configureHeadlessProperty();</span><br><span class="line">		SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">		listeners.started();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">					args);</span><br><span class="line">			ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">					applicationArguments);</span><br><span class="line">			Banner printedBanner = printBanner(environment);</span><br><span class="line">			context = createApplicationContext();</span><br><span class="line">			analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line">			prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">					printedBanner);</span><br><span class="line">			listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">return</span> context;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>它首先开启一个SpringApplicationRunListeners监听器，然后创建一个应用上下文ConfigurableApplicationContext，通过这个上下文加载应用所需的类和各种环境配置等。</p>
<p>一个应用能够正常运行起来，需要一些环境变量、各种资源和一些相关配置等，下面看下createApplicationContext方法会加载应用定义的和需要的类及各种资源。</p>
<h5 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h5><p>所有的自动配置都是从注解@SpringBootApplication引入的，它其实又包含了@Configuration、@EnableAutoConfiguration和@ComponentScan，其中，@EnableAutoConfiguration就是启用自动配置的，并将导入一些自动配置的类定义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@Inherited</span><br><span class="line">@SpringBootConfiguration</span><br><span class="line">@EnableAutoConfiguration</span><br><span class="line">@ComponentScan(</span><br><span class="line">    excludeFilters = &#123;@Filter(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public @interface SpringBootApplication &#123;</span><br><span class="line">    Class&lt;?&gt;[] exclude() default &#123;&#125;;</span><br><span class="line">    String[] excludeName() default &#123;&#125;;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = &quot;basePackages&quot;</span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() default &#123;&#125;;</span><br><span class="line">    @AliasFor(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = &quot;basePackageClasses&quot;</span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() default &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EnableAutoConfiguration最终会导入一个自动配置的类列表，列表中的自动配置类很多，这些配置类中大都将被导入，并处于备用状态，当项目中引入了相关的包时，相关的功能将被启用。 </p>
<p>例如在项目的maven配置中配置了Redis的引用，Redis的默认配置项将被启用，首先会读取项目中的配置，只有项目中没有相关配置才启用配置的默认值，下面代码是Redis的自动配置，如果配置文件中没设置，会使用下面默认设置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.redis"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> database = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="keyword">private</span> RedisProperties.Pool pool;</span><br><span class="line">    <span class="keyword">private</span> RedisProperties.Sentinel sentinel;</span><br><span class="line">    <span class="keyword">private</span> RedisProperties.Cluster cluster;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通过自动配置，就不用重复定义配置项名称了，覆盖约定的配置项即可。可通过查看各个Properties类，查看有哪些配置项。</p>
</blockquote>
<h4 id="Spring-Boot数据访问实现原理"><a href="#Spring-Boot数据访问实现原理" class="headerlink" title="Spring Boot数据访问实现原理"></a>Spring Boot数据访问实现原理</h4><p>要使用数据库，首先必须与数据库服务器建立连接。对于关系型数据库，Spring Boot 连接数据源一般都采用JDBC的方式来实现。其他类型的数据库使用各自独立的方式来建立连接。</p>
<h5 id="数据源类型和驱动"><a href="#数据源类型和驱动" class="headerlink" title="数据源类型和驱动"></a>数据源类型和驱动</h5><p>JDBC连接数据源必须指定数据源类型和数据库驱动程序，数据源主要有4中：</p>
<ul>
<li>使用java.sql.DriverManager类;</li>
<li>使用实现了javax.sql.DataSource接口的子类，DataSource接口由驱动程序供应商实现，主要有3类实现、基本实现、连接池实现，分布式事务实现 ；</li>
<li>DBCP连接池，Apache 软件基金组织下的开源连接池实现，Tomcat 的连接池正是采用该连接池来实现的；</li>
<li>C3P0连接池；</li>
</ul>
<p>Spring Boot 默认使用org.apache.tomcat.jdbc.pool.DataSource，它使用第2种方式，实现了javax.sql.DataSource接口。数据源的类型可以通过配置更改。</p>
<p>另外，Spring Boot 默认几乎支持现有的所有数据库。</p>
<h5 id="数据存取功能实现"><a href="#数据存取功能实现" class="headerlink" title="数据存取功能实现"></a>数据存取功能实现</h5><p>与数据库建立连接后，就可以对数据库执行一些存取操作，对数据库实现管理的功能。数据存取操作大体上包含两方面的内容，即实体建模和持久化。</p>
<p>不管是关系型数据库，还是NoSQL数据库，都遵循这一设计规范。实体建模即将Java的普通对象和关系映射为数据库表机器相关的关系，在Spring Boot中，主要是通过注解实现。</p>
<p>关系型数据库都使用了JPA的一套标准，它结合使用Hibernate实现了实体的持久化。后续的数据库管理设计都遵循了JPA这一个标准规范，提供相同的访问数据库的API。  </p>
<h4 id="微服务核心技术实现原理"><a href="#微服务核心技术实现原理" class="headerlink" title="微服务核心技术实现原理"></a>微服务核心技术实现原理</h4><p>Spring Cloud是基于对Netfix开源组件进一步封装的一套云应用开发工具，可以用来开发各种微服务应用。</p>
<h5 id="配置服务实现"><a href="#配置服务实现" class="headerlink" title="配置服务实现"></a>配置服务实现</h5><p>前一篇文章说到，配置管理的在线更新功能使用事件总线，即spring-cloud-bus来发布状态变化，并使用分布式消息来发布更新事件，分布式消息最终使用RabbitMQ来实现消息收发。</p>
<p>再来回顾下在线更新流程:</p>
<ul>
<li>更新Git仓库的配置文件；</li>
<li>以POST指令出发更新请求；</li>
<li>配置管理服务器从Git仓库中读取配置文件，并将配置文件分发给各个客户端，同时在RabbitMQ中发布一个更新消息；</li>
<li>客户端订阅RabbitMQ消息，收到消息后执行更新；</li>
</ul>
<p>配置管理服务器中的消息分发是从spring-cloud-bus中调用spring-cloud-stream组件实现的，而spring-cloud-stream使用RabbitMQ实现了分布式消息分发。具体实现就不说了，使用过RabbitMQ的很好理解。</p>
<h5 id="发现服务和负载均衡"><a href="#发现服务和负载均衡" class="headerlink" title="发现服务和负载均衡"></a>发现服务和负载均衡</h5><p>客户端执行注册使用计划任务的方式来实现，而客户端从发现服务器中更新其他在线的客户端列表，也使用了一个定时任务来管理。</p>
<p>当一个应用启用发现服务的功能之后，会默认启用Ribbon的负载均衡服务。Ribbon通过发现服务获取在线的客户端，为具有多个实例的客户端建立起负载均衡管理机制。</p>
<h5 id="分布式消息实现"><a href="#分布式消息实现" class="headerlink" title="分布式消息实现"></a>分布式消息实现</h5><p>使用spirng-cloud-stream可以非常简单地使用RabbitMQ的异步消息，Spring Cloud的配置管理中的分布式消息分发也是通过调用spring-cloud-stream组件来实现的。 </p>
<p>下面以消息生产者和消费者的实现说明分布式消息实现</p>
<p>消息生产者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding</span>(Source.class)</span><br><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="meta">@SpringBootApplication</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SenderApplication</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="meta">@Output</span>(Source.OUTPUT) </span><br><span class="line">    <span class="keyword">private</span> MessageChannel channel;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, path = <span class="string">"/send"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span> <span class="params">(@RequestBody Map&lt;String, Object&gt; msg)</span></span>&#123;</span><br><span class="line">        channel.send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SenderApplication.class, args);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消息消费者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableBinding</span>(Sink.class)</span><br><span class="line"><span class="meta">@IntegrationComponentScan</span></span><br><span class="line"><span class="meta">@MessageEndpoint</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ServiceActivator</span>(inputChannel=Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Map&lt;String, Object&gt; msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg.get(<span class="string">"msg"</span>).toString() + <span class="string">":"</span> + msg.get(<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ReceiverApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面的分析可以看到，Spring Boot及其一些相关组件，已经尽量把一些可以实现和做到的功能，都帮我们实现了。 虽然使用Spring Boot及其相关组件看起来非常简单，但实际上可以实现无比强大的功能，这就是Spring Boot 及其组件的神奇所在。</p>
</blockquote>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《深入实践Spring Boot》阅读笔记之二：分布式应用开发]]></title>
      <url>https://qqdong.github.io/2018/02/20/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5Spring%20Boot%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%8C%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>上篇文章总结了《深入实践Spring Boot》的第一部分，这篇文章介绍第二部分：分布式应用开发，以及怎么构建一个高性能的服务平台。</p>
<p>主要从以下几个方面总结：</p>
<ul>
<li>Spring Boot SSO</li>
<li>使用分布式文件系统</li>
<li>云应用开发</li>
<li>构建高性能的服务平台</li>
</ul>
<a id="more"></a>
<h4 id="Spring-Boot-SSO"><a href="#Spring-Boot-SSO" class="headerlink" title="Spring Boot SSO"></a>Spring Boot SSO</h4><p>上篇文章提到了安全设计，使用Spring Security进行用户验证和权限验证，但一个企业级的应用系统可能存在很多应用系统，每个应用系统都需要设计安全管理，但不可能为每一个应用系统都设计一套安全管理，这样不但耗时耗力，而且要做重复的工作，也不适宜建立统一的用户中心。</p>
<p>可以使用单点登录SSO的方式建立一个登录认证系统，并且实现对用户的统一管理。本章在使用Spring Security安全管理的基础上，再结合OAuth2认证授权协议来实现的，它不但适用于大型的分布式管理系统，也适用于为第三方提供统一的用户管理和认证的平台。</p>
<p>作者给出了一个完整的实例，以模块化的设计方式进行实现，整个demo的代码可以在github上查看。（<a href="https://github.com/chenfromsz/spring-boot-sso" target="_blank" rel="noopener">https://github.com/chenfromsz/spring-boot-sso</a>）</p>
<h5 id="demo说明"><a href="#demo说明" class="headerlink" title="demo说明"></a>demo说明</h5><p>我在本地运行了demo，通过chrome查看了系统间跳转的过程，先说明下模块的划分，然后看下运行效果。</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>工程</th>
<th>类型</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库管理模块</td>
<td>mysql</td>
<td>程序集成</td>
<td>数据库管理</td>
</tr>
<tr>
<td>安全配置模块</td>
<td>security</td>
<td>程序集成</td>
<td>安全策略配置和权限管理</td>
</tr>
<tr>
<td>登录认证模块</td>
<td>login</td>
<td>Web应用</td>
<td>SSO登录认证（80）</td>
</tr>
<tr>
<td>共享资源模块</td>
<td>resource</td>
<td>Web应用</td>
<td>共享资源（8083）</td>
</tr>
<tr>
<td>客户端应用1</td>
<td>web1</td>
<td>Web应用</td>
<td>客户端1（8081）</td>
</tr>
<tr>
<td>客户端应用2</td>
<td>web2</td>
<td>Web应用</td>
<td>客户端2（8082）</td>
</tr>
</tbody>
</table>
<p>访问首页时，跳转到登录页面，输入正确的账号、密码、验证码。<br>登录成功后，跳转到首页：<br><img src="http://oc3r3rke2.bkt.clouddn.com/15191199007517.jpg" alt="首页"></p>
<p>访问web1系统、web2系统时不需要重新登录，会自动登录：<br><img src="http://oc3r3rke2.bkt.clouddn.com/15191199213728.jpg" alt="web1系统首页"></p>
<p>「登录认证模块」主要包括验证用户账号、集成OAuth2服务端端功能。</p>
<p>「安全配置模块」是一个公共模块，集成了SSO客户端的安全策略配置和权限管理功能，供客户端引用。</p>
<p>「数据库管理模块」是一个公共模块，主要提供数据库的访问功能，供其他模块使用。</p>
<p>「共享资源模块」提供了一个简单的公共服务，2个客户端应用可通过spring-cloud-zuul直接调用。</p>
<p>后面会重点介绍下登录认证模块，其他模块比较简单，不再过多介绍。</p>
<blockquote>
<p>模块化设计可以提高代码的复用性，避免重复开发，实例中的「数据库管理模块」和「安全配置模块」可以被其他模块共用，减少大部分重复工作。<br>作者的这种设计方式值得我们学习，在以后的系统设计中，应多借鉴这种方式。</p>
</blockquote>
<h5 id="登录认证模块"><a href="#登录认证模块" class="headerlink" title="登录认证模块"></a>登录认证模块</h5><p>我画了一个流程图，先了解下用户认证、权限验证的基本过程：<br><img src="http://oc3r3rke2.bkt.clouddn.com/15191221758228.jpg" alt="基本处理流程"></p>
<p>整个处理流程，Spring Security都帮我们自动实现了，我们只需要对账号中心数据源、权限中心数据源进行配置和扩展，另外，可以对登录页面进行扩展，配置权限管理规则、防攻击策略、记住登录状态。</p>
<p>为了实现多个系统只需登录一次，需要集成OAuth2。添加spring-cloud-starter-oauth2依赖，编写一个配置类，继承AuthorizationServerConfigurerAdapter，并声明下@EnableAuthrizationServer来启用OAuth2的认证服务器功能。</p>
<p>OAuth2有很多授权机制，本例中使用authorization_code机制，具体配置就不过多说明了，可以参考下面的几篇文章：</p>
<p>[1] <a href="https://www.jianshu.com/p/e6655328b211" target="_blank" rel="noopener">初步理解Spring Security并实践</a><br>[2] <a href="https://www.cnblogs.com/lexiaofei/p/7028788.html" target="_blank" rel="noopener">security OAuth2.0 提供者实现原理</a><br>[3] <a href="http://www.leftso.com/blog/220.html" target="_blank" rel="noopener">jwt token介绍</a><br>[4] <a href="http://www.leftso.com/blog/139.html" target="_blank" rel="noopener">security OAuth2.0 jwt完美整合例子</a></p>
<h4 id="使用分布式文件系统"><a href="#使用分布式文件系统" class="headerlink" title="使用分布式文件系统"></a>使用分布式文件系统</h4><p>有这样一个问题，如果上传文件，如上传图片，应该怎样保存，保存在哪里？</p>
<p>传统的做法一般都保存在Web服务器所在机器中。但随着业务的日益发展，可能上传的文件会累积越来越多，单台机器往往会不堪重负，再加上一些负载均衡的配置和服务，需要分布式文件系统解决。</p>
<p>在诸多分布式的文件系统中，FastDFS是比较优秀的分布式文件系统。FastDFS是一个完全开源的分布式文件系统，使用比较简单方便，而且性能也很优秀，存储容量和访问性能可按需求进行线性横向扩展。</p>
<p>FastDFS服务端和客户端的安排、配置、管理都比较简单，书中描述的也比较详细，就不在此赘述了。</p>
<h4 id="云应用开发"><a href="#云应用开发" class="headerlink" title="云应用开发"></a>云应用开发</h4><p>Spring Cloud 是一套云应用开发工具集，为分布式的微服务开发提供了一整套简单易用的使用工具。Spring Cloud主要包括配置管理、服务发现、动态路由、负载均衡、断路器、安全管理、事件总线、分布式消息等组件的开发工具包。</p>
<p>Spring Cloud与Spring Boot 关系密切，能够臻于完美的几何使用。</p>
<p>本章重点介绍了配置服务、发现服务、动态路由和断路器、监控服务。</p>
<h5 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h5><p>一个项目工程总是需要一些配置，比如，要配置服务器的端口、访问数据库的参数等。一个大型的分布式系统可能存在很多这样需要配置的项目工程，配置管理是一个庞大的工程，需要一个单独的系统专门管理各个项目的配置。</p>
<p>通过Spring Cloud的配置管理，只需创建一个简单的工程，就可以实现分布式配置管理服务，同时还支持在线更新。</p>
<p>第一步，配置管理服务器<br>引入spring-cloud-config-server依赖，创建一个主程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件的存储目前支持使用本地存储、Git以及Subversion等方式。以Git方式为例，说明本地配置文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https:<span class="comment">//github.com/chenfromsz/spring-cloud-config-repo</span></span><br><span class="line">  rabbitmq:</span><br><span class="line">      addresses: $&#123;vcap.services.$&#123;PREFIX:&#125;rabbitmq.credentials.uri:amqp:<span class="comment">//$&#123;RABBITMQ_HOST:192.168.1.215&#125;:$&#123;RABBITMQ_PORT:5672&#125;&#125;</span></span><br><span class="line">      username: alan</span><br><span class="line">      password: alan</span><br></pre></td></tr></table></figure>
<p>服务端会自动从指定的git地址获取配置信息。raabitmq的配置用于通知客户端应用配置更新。</p>
<p>第二步，配置管理的客户端<br>需要在工程中引入spring-cloud-starter-config依赖，使用配置管理服务之后，如果本地的配置文件与配置管理服务器的配置文件有相同的配置项，将优先使用配置管理服务器的配置项。</p>
<p>客户端的配置文件bookstrap.yml如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: data</span><br><span class="line">  profiles:</span><br><span class="line">    active: development</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      uri: http:<span class="comment">//localhost:8888</span></span><br><span class="line">  rabbitmq:</span><br><span class="line">        addresses: amqp:<span class="comment">//192.168.1.214:5672</span></span><br><span class="line">        username: alan</span><br><span class="line">        password: alan</span><br></pre></td></tr></table></figure>
<p>其中，name用来指定应用的名称和配置文件的名称，uri设定配置服务服务端的地址和端口，profiles为使用配置文件名称的后缀部分，用于绑定不同的线上环境。</p>
<p>第三步，使用配置<br>如果配置文件中有cloud.config.test配置项，可以这样使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;cloud.config.test:World!&#125;"</span>) String msg;</span><br></pre></td></tr></table></figure></p>
<p>另外，可以使用spring-cloud-bus-amqp依赖，通过事件总线的方式，实现在线更新所有客户端的配置。</p>
<h5 id="发现服务"><a href="#发现服务" class="headerlink" title="发现服务"></a>发现服务</h5><p>在分布式系统中，可能存在很多应用和服务，各个服务渎职自主地管理自身的数据。服务与服务之间，需要互相共享一些数据，传统的方式需要自己编写一些接口程序，还需要使用复杂的配置来实现，使用Spring Cloud可以轻易做到这些。</p>
<p>第一步，创建发现服务器<br>引入spring-cloud-starter-eureka-server依赖，创建一个简单的主程序即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscoveryApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DiscoveryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二步，创建客户端<br>引入spring-cloud-starter-eurake依赖，主程序中加入@EnableDiscoveryClient启用发现服务的客户端。</p>
<p>配置文件如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: discovery</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: <span class="keyword">false</span></span><br><span class="line">    fetchRegistry: <span class="keyword">false</span></span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:<span class="comment">//192.168.1.221:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>
<h5 id="动态路由和断路器"><a href="#动态路由和断路器" class="headerlink" title="动态路由和断路器"></a>动态路由和断路器</h5><p>如何在服务间相互调用呢，可以使用动态路由、断路器和故障容错等功能。</p>
<p>引入spring-cloud-starter-zuul、spring-cloud-starter-hystrix依赖，添加@EnableZuulProxy和@EnableHystrix注解即可。</p>
<p>为了便于测试，可以通过共享Rest资源将repository的类直接暴露出来，很神奇吧，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RepositoryRestResource</span>(collectionResourceRel=<span class="string">"users"</span>,path=<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">GraphRepository</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"MATCH (u:User) WHERE u.name =~ ('(?i).*'+&#123;name&#125;+'.*') RETURN u"</span>)</span><br><span class="line">    <span class="function">Collection&lt;User&gt; <span class="title">findByNameContaining</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以通过<a href="http://localhost/users" target="_blank" rel="noopener">http://localhost/users</a> ， <a href="http://localhost/users/123" target="_blank" rel="noopener">http://localhost/users/123</a> 之类的方式访问。</p>
<p>通过以下3种方式调用其他服务对外暴露的接口：</p>
<ul>
<li>JavaScript：前端直接调用</li>
<li>RestTemplate：后端调用</li>
<li>FeignClient：特殊方式</li>
</ul>
<p>以RestTemplate为例说明一个服务调用data服务的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> <span class="meta">@LoadBalanced</span></span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserFallback"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	 Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	 params.put(<span class="string">"name"</span>, name);</span><br><span class="line">	 User user = restTemplate.getForObject(<span class="string">"http://data/user/findByName?name=&#123;name&#125;"</span>, User.class, params);</span><br><span class="line"></span><br><span class="line">	 <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面例子中使用了@HystrixCommand用于实现断路器，当一个系统服务突然出现故障时，会自动阻断对服务的访问和调用，转而调用备用方法。</p>
<h5 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h5><p>分布式服务系统中运行着很多服务，必须有一个管理机制和方法，能够一目了然地随时了解各个服务的运行情况及其健康指数。</p>
<p>使用Spring Cloud的监控服务，可以实时监控应用的运行情况。使用很简单，引入spring-cloud-starter-hystrix-dashboard依赖，创建一个主程序即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixApplication</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/hystrix"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体监控指标可参看官网文档。</p>
<h4 id="构建高性能的服务平台"><a href="#构建高性能的服务平台" class="headerlink" title="构建高性能的服务平台"></a>构建高性能的服务平台</h4><p>使用Spring Cloud开发的微服务，其独立而又相对隔离的特性，与Docker的理念有异曲同工之妙，所以使用Docker发布微服务，能够发挥其最大的优势，并且可以非常轻易地构建一个高性能和高可用的服务平台。</p>
<p>Docker可以很方便地创建和管理镜像，以及管理已经生成的和正在运行的容器。镜像是一种文件存储方式，可以把许多文件做成一个镜像文件。容器是镜像运行的一个实例，运行一个镜像，就会生成一个容器，容器生成之后，就可以在容器中管理应用系统了。</p>
<p>Docker的安装和发布服务，网上的资料很多，这里就不赘述了。</p>
<p>另外，可以使用其他一些服务管理工具来构建高性能和高可用的服务平台。docker-compose工具是Docker容器管理工具集，可以很方便地用来创建和重建容器、执行启动和停止容器等管理操作，以及查看整个服务体系的运行情况和输出日志等。使用docker-compose工具，只要一条指令就能启动整个分布式服务体系。</p>
<blockquote>
<p>通过本篇文章的介绍，大家可以感受到Spring Cloud在构建分布式应用时提供的便捷性，减少了大量的工作量。同时为我们考虑了方方面面，增强了系统的稳定性、高性能。<br>作者把所有代码都上传到github，大家可以直接运行demo深入了解。<br>[1] Spring Boot SSO：<a href="https://github.com/chenfromsz/spring-boot-sso" target="_blank" rel="noopener">https://github.com/chenfromsz/spring-boot-sso</a><br>[2] 云应用开发：<a href="https://github.com/chenfromsz/spring-boot-cloud" target="_blank" rel="noopener">https://github.com/chenfromsz/spring-boot-cloud</a></p>
</blockquote>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《深入实践Spring Boot》阅读笔记之一：基础应用开发]]></title>
      <url>https://qqdong.github.io/2018/02/19/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5Spring%20Boot-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>上上篇「1718总结与计划」中提到，18年要对部分项目拆分，进行服务化，并对代码进行重构。公司技术委员会也推荐使用spring boot，之前在各个技术网站中也了解过，它可以大大简化spring配置和各个组件的使用，与其关系密切的Spring Cloud可以很好支持微服务的开发。</p>
<p>为了后续项目的应用，想利用这2天看下《深入实践Spring Boot》，这本书是17年双十一期间在京东上买的，一直懒着没看。这本书偏应用，适合初学者看，正文内容也就240多页，看的会比较轻松。</p>
<p>目前，看完了第一部分，约占全书1/2内容，计划初七上班前看完这本书。我会分3篇文章进行介绍，这篇文章首先介绍下这本书的整体结构，然后总结下第一部分的内容。</p>
<p>我不会介绍具体的实现过程，只是把这本书想要讲的内容串起来，重点说明下我认为重要的内容。想深入了解的，可以直接看这本书，也可以通过文中的一些概念搜索相关的文章阅读。</p>
<a id="more"></a>
<h4 id="书籍整体结构"><a href="#书籍整体结构" class="headerlink" title="书籍整体结构"></a>书籍整体结构</h4><p>Spring Boot 是在Spring框架基础上创建的一个全新框架，其设计目的是简化Spring应用的搭建和开发过程，不但具有Spring的所有优秀特性，而且具有如下显著特点：</p>
<ul>
<li>为Spring开发提供更加简单的使用和快速开发的技巧；</li>
<li>具有开箱即用的默认配置功能，能根据项目依赖自动配置；</li>
<li>具有功能更加强大的服务体系，包括嵌入式服务、安全、性能指标、监控检查等；</li>
<li>可以不再需要XML配置，让应用更加轻巧和灵活； </li>
</ul>
<p>2014年4月发布了1.0.0版本，目前有2个版本，v1最新版本为v1.5.10，v2最新版本为v2.0.0.RC1。</p>
<p>本书从技术、实践和原理3个维度对Spring Boot进行了系统且深入的讲解，作者由浅入深逐步带我们了解Spring Boot。</p>
<h5 id="第一部分-技术维度"><a href="#第一部分-技术维度" class="headerlink" title="第一部分 - 技术维度"></a>第一部分 - 技术维度</h5><p>针对性地介绍了Spring Boot入门、数据库的使用和访问性能提升、界面设计、安全设计等重要技术知识，以实用性为主，帮助我们快速掌握Spring Boot开发方法和精髓，尽快融入生产实践中。</p>
<h5 id="第二部分-实践维度"><a href="#第二部分-实践维度" class="headerlink" title="第二部分 - 实践维度"></a>第二部分 - 实践维度</h5><p>用生产环境中的实际案例讲解如何使用Spring Boot开发分布式应用和云应用，以及如何用微服务构建高可用的服务平台。</p>
<h5 id="第三部分-原理维度"><a href="#第三部分-原理维度" class="headerlink" title="第三部分 - 原理维度"></a>第三部分 - 原理维度</h5><p>从源码层面着重分析了Spring Boot的程序加载、自动配置、数据管理、S<br>pring Cloud的配置管理、发现服务和负载均衡服务等核心功能的实现原理，帮助我们更深刻理解Spring Boot开发，掌握其精髓。</p>
<blockquote>
<p>很喜欢作者的章节安排，以后学习新技术时，可以按照这个思路去学习。 </p>
</blockquote>
<h4 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h4><p>本章主要介绍开发环境的配置，包括安装JDK，安装IDEA、安装Maven、安装Git客户端，创建了一个简单的项目，演示如何使用Spring Boot。</p>
<h5 id="使用Spring-Initializr创建项目"><a href="#使用Spring-Initializr创建项目" class="headerlink" title="使用Spring Initializr创建项目"></a>使用Spring Initializr创建项目</h5><p>IDEA提供了可视化的界面创建各种类型的项目，可以通过Spring Initializr的方式，按要求创建Spring Boot项目。</p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15190424636299.jpg" alt="Spring Initializr"></p>
<h5 id="一个简单demo"><a href="#一个简单demo" class="headerlink" title="一个简单demo"></a>一个简单demo</h5><p>项目创建完成后，会生成一个入口Applicaton类，进行如下的修改，就可提供reset接口，供使用者访问。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookPart1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(BookPart1Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="运行与发布"><a href="#运行与发布" class="headerlink" title="运行与发布"></a>运行与发布</h5><p>运行Spring Boot项目很简单，像普通项目一样直接运行即可。</p>
<p>如果要发布到线上Tomcat容器中，需要增加一个打包插件:spring-boot-maven-plugin，通过mvn package打包即可。</p>
<h5 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h5><p>可以在工程的resources文件夹中创建一个application.properties或application.yml文件，该文件会被发布在classpath中，被Spring Boot自动读取。 作者推荐使用application.yml文件，因为它提供结构化及其嵌套的格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">  port: 80</span><br></pre></td></tr></table></figure>
<h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4><p>使用数据库是开发基本应用的基础，Spring Boot 提供更加高层次上访问数据库。本章通过介绍使用MySQL、Redis、MongoDB、Neo4j来说明Spring Boot提供的便捷性。</p>
<h5 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h5><p>对于传统关系型数据库来说，Spring Boot使用JPA资源库来实现对数据库的操作，JPA是为POJO提供持久化的标准规范，即将Java的普通对象通过对象关系映射持久化到数据库中。</p>
<p>作者通过「实体建模」-&gt; 「实体持久化」-&gt; 「测试程序」的思路介绍MySQL的使用。</p>
<p>实体建模是通过注解描述与数据库的对应关系，包括实体的属性、实体之间的关系。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15190456204109.jpg" alt=""></p>
<p>实体持久化是Spring Data提供的强大功能，通过继承于JPA资源库JpaRepository接口，就可以对数据库进行增删改查、分页查询和指定排序的字段等操作，不需要自己实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JPA还提供了一些自定义声明方法的规则，这些方法也不用实现，JPA将会代理实现这些方法，十分方便。</p>
<h5 id="使用Redis"><a href="#使用Redis" class="headerlink" title="使用Redis"></a>使用Redis</h5><p>Redis没有表结构的概念，所以要实现MySQL数据库表的数据在Redis中存取，必须做一些转换，可以使用JSON格式的文本作为Redis与Java普通对象互相交换数据的存储格式。</p>
<p>通过RedisTemplate可以很方便的操作Redis。</p>
<p>对于Redis的使用，还可以将注解方式（@Cacheable、@CachePut、@CacheEvict）与调用数据库的方法相结合，就不用编写redis操作服务类了，使用起来也更简单。不过只能对简单对象进行相关操作，对于想实体User包含一定关系的复杂对象，或其他集合、列表对象，就不能使用简单注解方式来实现，还得使用RedisTemplate。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleService</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> RoleRedis roleRedis;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"simpleKey"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.findOne(id);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"objectId"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">create</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.save(role);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"objectId"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">update</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.save(role);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"simpleKey"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        roleRepository.delete(id);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用MongoDB"><a href="#使用MongoDB" class="headerlink" title="使用MongoDB"></a>使用MongoDB</h5><p>MongoDB是文档型的NoSQL数据库，具有大数据量、高并发等优势，但缺点是不能建立实体关系，而且也没有事务管理机制。</p>
<p>MongoDB 也有像使用JPA那样的资源库，引入spring-data-mongodb和spring-boot-starter-hateoas依赖库，这里就不过多介绍了。</p>
<h5 id="使用Neo4j"><a href="#使用Neo4j" class="headerlink" title="使用Neo4j"></a>使用Neo4j</h5><p>Neo4j是一个高性能的NoSQL图数据库，并且具备完全事务特性，同时具备传统关系型数据库的优点，又具备NOSQL数据库优势。</p>
<p>Neo4j将结构化数据存储在一张图上，图中每一个节点的属性表示数据的内容，每一条有向边表示数据的关系。它没有表结构的概念，它的数据用节点的属性来表示。</p>
<p>举个例子，现在有演员和电影两个实体，它们的关系表现为一个演员在一部电影中扮演一个角色。那么就可以创建演员和电影两个节点实体，和一个角色关系实体。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15190491796642.jpg" alt="Neo4j举例"></p>
<p>它更加形象和贴切地表现了实体之间的关系，而且这个实体-关系模型是可以不经过任何转换而直接存入数据库的，这将很大程度上减轻设计工作和沟通成本。</p>
<p>像JPA使用了ORM一样，Neo4j使用了对象-图形映射OGM的方式来建模。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RelationshipEntity</span>(type = <span class="string">"ACTS_IN"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123; </span><br><span class="line">    <span class="meta">@GraphId</span> </span><br><span class="line">    Long id;</span><br><span class="line">    String role;</span><br><span class="line">    <span class="meta">@StartNode</span> </span><br><span class="line">    Actor actor;</span><br><span class="line">    <span class="meta">@EndNode</span> </span><br><span class="line">    Movie movie;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(Actor actor, Movie movie, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actor = actor;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">        <span class="keyword">this</span>.role = name;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面的介绍可以看出，在Spring Boot框架中使用数据库非常简单、容易，主要得益于Spring Boot资源库的强大功能，Spring Boot整合了第三方资源，把复杂的操作变成简单的调用。</p>
</blockquote>
<h4 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h4><p>本章使用Spring Boot框架设计Web显示界面，使用MVC的概念将数据管理、事件控制、界面显示进行分层处理，实现多层结构设计。使用过MVC框架的比较好理解，这里就不过多说明了。</p>
<p>其中界面显示使用Thymeleaf模板，之前没接触过，简单说明下。Thymeleaf是现代化服务器端的Java模板引擎，不同与JSP和FreeMarker，Thymeleaf的语法更加接近HTML，并且也有不错的扩展性。</p>
<h4 id="提高数据库访问性能"><a href="#提高数据库访问性能" class="headerlink" title="提高数据库访问性能"></a>提高数据库访问性能</h4><p>使用关系型数据库的应用系统的性能瓶颈最终还是数据库。本章通过以下几种方式提高数据库访问性能:</p>
<ul>
<li>使用Druid</li>
<li>扩展JPA功能</li>
<li>使用Redis做缓存</li>
</ul>
<h5 id="使用Druid"><a href="#使用Druid" class="headerlink" title="使用Druid"></a>使用Druid</h5><p>Druid是一个关系型数据库连接池，是阿里巴巴的一个开源项目，在监控、可扩展性、稳定性和性能方面具有明显的优势。通过使用Druid连接池，可以一定程度上提高数据库的访问性能。</p>
<h5 id="扩展JPA功能"><a href="#扩展JPA功能" class="headerlink" title="扩展JPA功能"></a>扩展JPA功能</h5><p>使用JPA，在资源库接口定义中不但可以按照其规则约定的方法声明各种方法，还可以使用注解@Query来定义一些简单的查询语句，优化SQL语句。</p>
<p>可以通过自定义一个接口，继承于JpaRepository，扩展已有的JPA接口。自定义接口必须在程序启动时装配，才能正常使用。然后，在JPA配置类中，通过@EnableJpaRepositories加载定义的装配类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ExpandJpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select t from User t where t.name =?1 and t.email =?2"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByNameAndEmail</span><span class="params">(String name, String email)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select t from User t where t.name like :name"</span>)</span><br><span class="line">    <span class="function">Page&lt;User&gt; <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, Pageable pageRequest)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用Redis做缓存"><a href="#使用Redis做缓存" class="headerlink" title="使用Redis做缓存"></a>使用Redis做缓存</h5><p>前面「使用Redis」已经介绍。</p>
<h4 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h4><p>Web应用的安全管理，主要包括两个方面的内容：一方面是用户身份验证，即用户登录的设计；另一方面是用户授权，即一个用户在一个应用系统中能够执行哪些操作的权限管理。</p>
<p>权限管理的设计一般使用角色来管理，给一个用户赋予哪些角色，用户就具有哪些权限。本章主要使用spring-cloud-security来进行安全管理设计。</p>
<p>使用时，需要继承spring-cloud-starter-parent，并引入spring-cloud-starter-security依赖。</p>
<p>关于系统的安全管理及各种设计，Spring Security已经大体上都实现了，只需要进行一些配置和引用，就能够正常使用了。具体实现就不在此重复描述了。</p>
<blockquote>
<p>好多实现细节，我没有展现出来，一方面会显得篇幅太长，主次不鲜明，另一方面作者把所有代码都放到github了（<a href="https://github.com/chenfromsz?tab=repositories" target="_blank" rel="noopener">http://github.com/chenfromsz</a>）。<br>后续在公司项目中实践好，我再谈谈自己的使用经验。</p>
</blockquote>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年公众号文章计划]]></title>
      <url>https://qqdong.github.io/2018/02/18/2018%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>18年，无论是工作还是生活，都将更忙，今年是很关键的一年。</p>
<p>公司业务发展迅猛，对人才的培养也很重视，自己要跟上公司的步伐，在技术和管理上更进一步。</p>
<p>为了充分利用业余时间，把平时看视频、无意义的熬夜时间，用在「写公众号文章」，将自己的技术学习、业务实现进行总结、分享，让自己更充实，更有动力。</p>
<p>书上得来终觉浅，将学习的技术与业务实现相结合，相互促进。</p>
<p>希望大家关注我，给我一些动力，18年一起进步。</p>
<a id="more"></a>
<h4 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h4><p>18年想对一些技术深入研究，当然，都是与项目相关的技术，会介绍在实际项目中的应用。</p>
<p>会更加关注团队管理和协作，有意识地去学习相关知识，向身边优秀的同事学习。</p>
<p>下面从技术、业务实现、团队协作列举将要写的内容。</p>
<h5 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h5><ul>
<li>CAS 单点登录</li>
<li>Shiro 权限控制</li>
<li>多线程开发</li>
<li>Spring Boot 实践</li>
<li>Netty 源码探究</li>
</ul>
<h5 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h5><ul>
<li>分布式会话实现（多系统）</li>
<li>多语言实现</li>
<li>多租户多时区实现</li>
<li>消息平台实现</li>
<li>项目重构和服务化</li>
</ul>
<h5 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h5><ul>
<li>编码规范</li>
<li>代码review</li>
<li>工作流规范推进</li>
<li>团队沟通和协作     </li>
</ul>
<h4 id="执行方案"><a href="#执行方案" class="headerlink" title="执行方案"></a>执行方案</h4><p>有想法就迈出了第一步，希望自己能够坚持执行，执行过程中要遵从基本的原则，规划好时间。</p>
<h5 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h5><ul>
<li>学习的技术要与项目相关，一方面使项目更好的完成，一方面加深对相关技术的理解；</li>
<li>以公司项目为重心，全身心投入，利用空余时间学习、总结相关技术，编写公众号文章；</li>
<li>一定要尽最大努力保证文章质量，让自己满意；</li>
</ul>
<h5 id="时间规划"><a href="#时间规划" class="headerlink" title="时间规划"></a>时间规划</h5><p>18年初，我的小孩要出生了，将会投入许多时间。16年底，我报了人大在职研究生，周六还要去上课。    </p>
<p>平时应该少看电视视频，多锻炼，保持持好精神状态。   </p>
<p>希望自己能做到：</p>
<ul>
<li>每周至少产出一篇文章，特殊情况除外；</li>
<li>每天晚上、周六日，抽出时间学习、总结相关技术；</li>
</ul>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> summary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> plan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1718总结与计划]]></title>
      <url>https://qqdong.github.io/2018/02/16/summary-2018/</url>
      <content type="html"><![CDATA[<p>2018年已经悄然到来，回望过去一年，收获很多，感恩很多。未来一年，内心充满了期待，无论是工作还是生活，将会发生很大变化。大年初一的晚上，将自己的所思所想记录下来，与大家分享，激励自己18年更努力。</p>
<h4 id="17年总结"><a href="#17年总结" class="headerlink" title="17年总结"></a>17年总结</h4><p>我目前就职于小米，在『小米网智能客服项目』从事开发工作，项目主要包含在线客服、智能机器人、智能数据分析三大块，另外还包括热线、邮件、工单等模块。    </p>
<p>16年3月份，我加入这个团队，当时就4个人，每个人负责多个子项目。经过了解，项目初期想做的功能很多，设计的比较大，很多人投入进来，形成了很多个子服务。所以17年上半年之前，我一直在维护项目，解决线上的一些问题，实现业务的一些小需求。另外，当时小米的管理比较扁平化，项目管理和团队管理也不是很规范，自己也比较松散，技术和团队协作能力提升的都比较少。</p>
<p>17年下半年，小米发展增速明显，国内和国外的业绩都有了很大提升。管理上也开始重视起来，招了很多项目经理，『小米网智能客服项目』有了产品功能规划，开发团队也慢慢扩大，慢慢变得好起来。</p>
<p>还有一点对我影响很大，我们团队的开发负责人，17年中旬加入进来，有10多年的开发、管理经验，从他身上，在任务规划、执行力、团队协作上学到了很多。</p>
<p>下面从主要工作、线上问题处理、规划执行能力、家庭几个方面总结自己过去的一年。</p>
<a id="more"></a>
<h5 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h5><p>我主要负责在线客服，使用到的主要技术点：</p>
<ul>
<li>NIO</li>
<li>多线程</li>
<li>WebSocket协议</li>
<li>会话状态管理</li>
<li>CAS单点登录</li>
<li>Shiro权限控制</li>
</ul>
<p>使用到的主要框架和组件：</p>
<ul>
<li>SSM</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>ZooKeeper</li>
<li>Thrift</li>
</ul>
<h6 id="消息平台"><a href="#消息平台" class="headerlink" title="消息平台"></a>消息平台</h6><p>在线客服最重要的一点是保证用户和客服能够在线沟通，类似于IM。现有系统缺少消息确认、重发机制，多终端消息同步也不支持，17年在技术负责人的指导下，重构了『在线实时聊天』模块，进行了抽象，变为通用的『消息平台』：</p>
<ul>
<li>长连接接入层还是使用netty实现的websocket通道，比之前更通用，扩展其他协议也很方便，另外可支持多实例部署，随时重启；</li>
<li>消息存储层，为了方便，使用MySQL+Redis进行存储，保证了消息的有循序，实现了消息确认和重发机制；</li>
</ul>
<p>有点遗憾的是，17年下半年规划需求比较多且比较紧急，人也比较少，没能够正式上线，18年一定要推进上线。</p>
<h6 id="maven依赖统一管理-amp-工具类封装"><a href="#maven依赖统一管理-amp-工具类封装" class="headerlink" title="maven依赖统一管理&amp;工具类封装"></a>maven依赖统一管理&amp;工具类封装</h6><p>前面说到，项目有很多子服务，每个服务maven的配置都很相似，更新维护都要修改所有的服务，不是很方便。经过调研和思考，决定将公共的依赖、版本声明、构建过程、maven插件统一管理，抽象出一个parent pom。</p>
<p>maven本身就支持parent pom，每个子项目只需声明下继承父pom，就可以直接声明需要的依赖，不需要再声明版本，构建过程。</p>
<p>另外，将公司其他组的一些工具类，也声明在父pom中。客服项目特有的一些工具类移到父pom所在项目，并在父pom中声明。</p>
<h6 id="国内和海外代码分支合并"><a href="#国内和海外代码分支合并" class="headerlink" title="国内和海外代码分支合并"></a>国内和海外代码分支合并</h6><p>因历史原因，国内和海外代码分支是不同的分支，海外的功能较国内相对较少，而且海外有近1年未更新了。一次，业务提出一个海外需求，该需求在国内分支已经实现。经过确认，海外有的功能，国内都有，而且交互和操作都相同，只是一些基础存储组件不同。最终决定，合并国内和海外分支，方便以后功能扩展，节约开发时间和维护成本。</p>
<p>升级过程熬了2个通宵（不是连续的），过程在此就不详细描述了，简单总结下：   </p>
<ul>
<li>大的变更上线前，一定要做好回滚预案， 升级失败可及时回滚，不影响现有业务；</li>
<li>条件允许，最好有预上线环境，尽量完全模拟线上，因为海外网络结构比较复杂，虽然测试环境测试正常，上线后可能出现各种问题；</li>
<li>上线时，相关人都要在场，有问题时及时协调处理；</li>
</ul>
<h6 id="推进协作开发规范"><a href="#推进协作开发规范" class="headerlink" title="推进协作开发规范"></a>推进协作开发规范</h6><p>相信大部分团队都在使用git进行代码版本控制，但真正用好git，多人协作开发一个项目，需要规定一套工作流规范。</p>
<p>我借鉴网上比较流行的git flow规范，形成了相关规范，对各种场景的使用进行了说明，并做了一次分享，现在已经在项目中试运行，明年会加强推进。</p>
<blockquote>
<p>扩展阅读：</p>
</blockquote>
<ul>
<li><a href="http://git.oschina.net/progit/3-Git-%E5%88%86%E6%94%AF.html" target="_blank" rel="noopener">分支系统介绍</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html#getting_started" target="_blank" rel="noopener">git-flow工具</a></li>
</ul>
<h5 id="线上问题处理"><a href="#线上问题处理" class="headerlink" title="线上问题处理"></a>线上问题处理</h5><p>问题处理也是很重要的能力，更能提现一个人的能力，遇到问题时，首先不要排斥，它是提升自己能力的一个机会，问题解决后，要进行总结回顾，下次遇到相似问题时可以快速定位和处理。</p>
<p>17年遇到了不少问题，下面列举2个问题总结（当时总结的）。</p>
<h6 id="测试环境-客服端无法访问"><a href="#测试环境-客服端无法访问" class="headerlink" title="测试环境-客服端无法访问"></a>测试环境-客服端无法访问</h6><ul>
<li>问题描述 <ul>
<li>浏览器访问测试环境客服端时，直接提示502错误，后台服务不可用;</li>
</ul>
</li>
<li>排查过程<ul>
<li>查看resin服务器日志和程序日志，未发现异常;</li>
<li>查看cpu指标，未发现异常;</li>
<li>查看jvm内存使用情况、垃圾回收情况，未发现异常;</li>
<li>查看jvm栈，发现有好多线程在同一处等待数据库资源，可能数据库资源已被耗尽;</li>
<li>重点关注“线程等待的代码”，打开数据库连接池日志，在本地尝试复现;</li>
<li>同事在本地复现，发现调用snaker（一个开源的工作流框架）的一些方法时，占用很多连接， 用完后并没有释放;</li>
<li>同事通过review代码，发现，在Service类加上Spring事务管理器后，问题解决;</li>
<li>通过查看snaker源码，snaker在处理工作流时，旨在最后一次操作还回连接，如果未开启事务管理， 会获取多个连接，但仅释放最后一次连接，导致连接泄漏;</li>
</ul>
</li>
<li>总结<ul>
<li>排查问题时，不应太着急，理清思路，一步步进行排查;</li>
<li>珍视排查问题的机会，从中会学到很多;</li>
</ul>
</li>
</ul>
<h6 id="海外正式环境-ip白名单问题"><a href="#海外正式环境-ip白名单问题" class="headerlink" title="海外正式环境-ip白名单问题"></a>海外正式环境-ip白名单问题</h6><ul>
<li>问题处理过程<ul>
<li>2018/02/04，发现时常有提示【ip禁止访问】的问题，当时觉得可能自己的网络不稳定，没有在意；</li>
<li>2018/02/05，业务开始反馈多个客服出现【ip禁止访问】的问题，我和同事开始介入排查；</li>
<li>尝试重启服务解决这个问题，但无效；</li>
<li>临时关闭ip白名单功能，让业务可以正常使用；</li>
<li>2018/02/06上午，我尝试开启ip白名单功能，但还是出现【ip禁止访问的问题】;但发现服务端打印的访问者(我的内网机器)ip和我真实的不同；（curl cip.cc）</li>
<li>把发现的情况告诉运维，运维开始排查；</li>
<li>2018/02/06下午，4点半左右，运维定位到问题:信息部将某个域名公网IP转发到专线出口，说是为了解决国内到新加坡走国际链路慢的问题;</li>
<li>5点半左右，我添加对应的网段到ip白名单中，开启ip白名单功能；</li>
<li>后续观察，问题解决；</li>
</ul>
</li>
<li>总结<ul>
<li>不放过一个异常的现象，也不排斥和害怕处理这些问题；<ul>
<li>明确：线上问题处理能力是很重要的能力；</li>
<li>整体上分析问题出现的可能原因；</li>
</ul>
</li>
<li>如果线上一直运行正常，突然某个功能不可用，就要考虑外部的一些因素了，尤其是网络；</li>
</ul>
</li>
</ul>
<h5 id="规划执行能力"><a href="#规划执行能力" class="headerlink" title="规划执行能力"></a>规划执行能力</h5><p>从团队负责人身上，获益最大的就是规划执行能力，让我做事有条不紊，有始有终，更充实、更有效。</p>
<p>下面分享下我们团队和我的规划执行过程</p>
<ul>
<li>每月初进行月度总结和规划；</li>
<li>每周四下午填写周报，我会详细总结上周计划完成情况、下周计划；（特别重要，会特别认真填写）</li>
<li>每周五进行进行周会；</li>
<li>每周五，我会把下周主要工作同步到outlook日历中，细分每一天的任务；</li>
<li>协作过程<ul>
<li>接到需求后，产品先进行分析，给出产品文档和初步的原型设计；</li>
<li>开发阅读和理解产品文档，记录下疑问；</li>
<li>产品和开发一起参加需求确认人，对一些细节和疑问进行讨论，确定最终的需求和原型；</li>
</ul>
</li>
<li>其他<ul>
<li>团队任务使用teambition进行管理，可查看团队所有任务；</li>
<li>重点任务，每天下班前会进行沟通，确保任务按计划执行；</li>
</ul>
</li>
</ul>
<p>我严格执行了上面的过程，获益良多。</p>
<h5 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h5><p>篇幅原因，就不多说了，总结两点：</p>
<ul>
<li>老婆辛苦了，怀了小宝宝，我没能好好照顾你，感谢你的包容；</li>
<li>感谢丈母娘，专门辞去工作照顾你的女儿，辛苦了；</li>
</ul>
<h4 id="18年计划"><a href="#18年计划" class="headerlink" title="18年计划"></a>18年计划</h4><h5 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h5><p>我会深入学习以下相关技术：</p>
<ul>
<li>即时通讯</li>
<li>NIO</li>
<li>消息系统</li>
<li>分布式缓存</li>
<li>spring boot</li>
<li>数据分析</li>
</ul>
<h5 id="管理能力"><a href="#管理能力" class="headerlink" title="管理能力"></a>管理能力</h5><p>18年，我将带个小组，多花精力在管理上，阅读相关数据，向身边优秀的人多学习，加强小组、部门间的协作沟通。</p>
<h5 id="家庭-1"><a href="#家庭-1" class="headerlink" title="家庭"></a>家庭</h5><p>3月份，我的宝宝就要出生了，我会多花点时间学习如何与她沟通。<br>老婆会更辛苦，我会多包容她，陪着她。</p>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> summary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo使用七牛作为文件存储]]></title>
      <url>https://qqdong.github.io/2018/02/16/hexo-qiniu-pic/</url>
      <content type="html"><![CDATA[<h3 id="注册七牛账号"><a href="#注册七牛账号" class="headerlink" title="注册七牛账号"></a>注册七牛账号</h3><p>进入 <a href="https://portal.qiniu.com/signup?code=3ldwahs7n653m" target="_blank" rel="noopener">七牛</a> 官网注册账号</p>
<h3 id="安装hexo七牛插件"><a href="#安装hexo七牛插件" class="headerlink" title="安装hexo七牛插件"></a>安装hexo七牛插件</h3><p>插件地址：<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">点击</a></p>
<p>文档说明比较全，按照README.md文件一步一步安装、配置即可</p>
<h3 id="本地上传图片"><a href="#本地上传图片" class="headerlink" title="本地上传图片"></a>本地上传图片</h3><p>hexo qiniu sync<br><em>同步本地图片到七牛</em></p>
<p>hexo qiniu sync2<br><em>增加同步上传那些本地与七牛空间有差异的文件</em></p>
<a id="more"></a>
<h3 id="在md文件中使用图片"><a href="#在md文件中使用图片" class="headerlink" title="在md文件中使用图片"></a>在md文件中使用图片</h3><p>{ % qnimg test/demo.png title:图片标题 alt:图片说明 ‘class:class1 class2’  % }<br>其中是qnimg是七牛插件定义的标签</p>
<p>附上是我的配置<br><img title="七牛插件配置" alt="七牛插件配置" src="http://oc3r3rke2.bkt.clouddn.com/static/images/blog/hexo-qiniu-config.png"></p>
<p><div align="center"><br><img src="http://upload-images.jianshu.io/upload_images/115629-5a140433dc5e61ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="情情说"></div></p>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> qiniu </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
