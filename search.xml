<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《深入实践Spring Boot》阅读笔记之一：基础应用开发]]></title>
      <url>https://qqdong.github.io/2018/02/19/%E6%B7%B1%E5%85%A5%E5%AE%9E%E8%B7%B5Spring%20Boot-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>上上篇「1718总结与计划」中提到，18年要对部分项目拆分，进行服务化，并对代码进行重构。公司技术委员会也推荐使用spring boot，之前在各个技术网站中也了解过，它可以大大简化spring配置和各个组件的使用，与其关系密切的Spring Cloud可以很好支持微服务的开发。</p>
<p>为了后续项目的应用，想利用这2天看下《深入实践Spring Boot》，这本书是17年双十一期间在京东上买的，一直懒着没看。这本书偏应用，适合初学者看，正文内容也就240多页，看的会比较轻松。</p>
<p>目前，看完了第一部分，约占全书1/2内容，计划初七上班前看完这本书。我会分3篇文章进行介绍，这篇文章首先介绍下这本书的整体结构，然后总结下第一部分的内容。</p>
<p>我不会介绍具体的实现过程，只是把这本书想要讲的内容串起来，重点说明下我认为重要的内容。想深入了解的，可以直接看这本书，也可以通过文中的一些概念搜索相关的文章阅读。</p>
<a id="more"></a>
<h4 id="书籍整体结构"><a href="#书籍整体结构" class="headerlink" title="书籍整体结构"></a>书籍整体结构</h4><p>Spring Boot 是在Spring框架基础上创建的一个全新框架，其设计目的是简化Spring应用的搭建和开发过程，不但具有Spring的所有优秀特性，而且具有如下显著特点：</p>
<ul>
<li>为Spring开发提供更加简单的使用和快速开发的技巧；</li>
<li>具有开箱即用的默认配置功能，能根据项目依赖自动配置；</li>
<li>具有功能更加强大的服务体系，包括嵌入式服务、安全、性能指标、监控检查等；</li>
<li>可以不再需要XML配置，让应用更加轻巧和灵活； </li>
</ul>
<p>2014年4月发布了1.0.0版本，目前有2个版本，v1最新版本为v1.5.10，v2最新版本为v2.0.0.RC1。</p>
<p>本书从技术、实践和原理3个维度对Spring Boot进行了系统且深入的讲解，作者由浅入深逐步带我们了解Spring Boot。</p>
<h5 id="第一部分-技术维度"><a href="#第一部分-技术维度" class="headerlink" title="第一部分 - 技术维度"></a>第一部分 - 技术维度</h5><p>针对性地介绍了Spring Boot入门、数据库的使用和访问性能提升、界面设计、安全设计等重要技术知识，以实用性为主，帮助我们快速掌握Spring Boot开发方法和精髓，尽快融入生产实践中。</p>
<h5 id="第二部分-实践维度"><a href="#第二部分-实践维度" class="headerlink" title="第二部分 - 实践维度"></a>第二部分 - 实践维度</h5><p>用生产环境中的实际案例讲解如何使用Spring Boot开发分布式应用和云应用，以及如何用微服务构建高可用的服务平台。</p>
<h5 id="第三部分-原理维度"><a href="#第三部分-原理维度" class="headerlink" title="第三部分 - 原理维度"></a>第三部分 - 原理维度</h5><p>从源码层面着重分析了Spring Boot的程序加载、自动配置、数据管理、S<br>pring Cloud的配置管理、发现服务和负载均衡服务等核心功能的实现原理，帮助我们更深刻理解Spring Boot开发，掌握其精髓。</p>
<blockquote>
<p>很喜欢作者的章节安排，以后学习新技术时，可以按照这个思路去学习。 </p>
</blockquote>
<h4 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h4><p>本章主要介绍开发环境的配置，包括安装JDK，安装IDEA、安装Maven、安装Git客户端，创建了一个简单的项目，演示如何使用Spring Boot。</p>
<h5 id="使用Spring-Initializr创建项目"><a href="#使用Spring-Initializr创建项目" class="headerlink" title="使用Spring Initializr创建项目"></a>使用Spring Initializr创建项目</h5><p>IDEA提供了可视化的界面创建各种类型的项目，可以通过Spring Initializr的方式，按要求创建Spring Boot项目。</p>
<p><img src="http://oc3r3rke2.bkt.clouddn.com/15190424636299.jpg" alt="Spring Initializr"></p>
<h5 id="一个简单demo"><a href="#一个简单demo" class="headerlink" title="一个简单demo"></a>一个简单demo</h5><p>项目创建完成后，会生成一个入口Applicaton类，进行如下的修改，就可提供reset接口，供使用者访问。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookPart1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(BookPart1Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="运行与发布"><a href="#运行与发布" class="headerlink" title="运行与发布"></a>运行与发布</h5><p>运行Spring Boot项目很简单，像普通项目一样直接运行即可。</p>
<p>如果要发布到线上Tomcat容器中，需要增加一个打包插件:spring-boot-maven-plugin，通过mvn package打包即可。</p>
<h5 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h5><p>可以在工程的resources文件夹中创建一个application.properties或application.yml文件，该文件会被发布在classpath中，被Spring Boot自动读取。 作者推荐使用application.yml文件，因为它提供结构化及其嵌套的格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line">  port: 80</span><br></pre></td></tr></table></figure>
<h4 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h4><p>使用数据库是开发基本应用的基础，Spring Boot 提供更加高层次上访问数据库。本章通过介绍使用MySQL、Redis、MongoDB、Neo4j来说明Spring Boot提供的便捷性。</p>
<h5 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h5><p>对于传统关系型数据库来说，Spring Boot使用JPA资源库来实现对数据库的操作，JPA是为POJO提供持久化的标准规范，即将Java的普通对象通过对象关系映射持久化到数据库中。</p>
<p>作者通过「实体建模」-&gt; 「实体持久化」-&gt; 「测试程序」的思路介绍MySQL的使用。</p>
<p>实体建模是通过注解描述与数据库的对应关系，包括实体的属性、实体之间的关系。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15190456204109.jpg" alt=""></p>
<p>实体持久化是Spring Data提供的强大功能，通过继承于JPA资源库JpaRepository接口，就可以对数据库进行增删改查、分页查询和指定排序的字段等操作，不需要自己实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;, <span class="title">QueryByExampleExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">findAll</span><span class="params">(Example&lt;S&gt; var1, Sort var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JPA还提供了一些自定义声明方法的规则，这些方法也不用实现，JPA将会代理实现这些方法，十分方便。</p>
<h5 id="使用Redis"><a href="#使用Redis" class="headerlink" title="使用Redis"></a>使用Redis</h5><p>Redis没有表结构的概念，所以要实现MySQL数据库表的数据在Redis中存取，必须做一些转换，可以使用JSON格式的文本作为Redis与Java普通对象互相交换数据的存储格式。</p>
<p>通过RedisTemplate可以很方便的操作Redis。</p>
<p>对于Redis的使用，还可以将注解方式（@Cacheable、@CachePut、@CacheEvict）与调用数据库的方法相结合，就不用编写redis操作服务类了，使用起来也更简单。不过只能对简单对象进行相关操作，对于想实体User包含一定关系的复杂对象，或其他集合、列表对象，就不能使用简单注解方式来实现，还得使用RedisTemplate。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleService</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> RoleRepository roleRepository;</span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> RoleRedis roleRedis;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Cacheable</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"simpleKey"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.findOne(id);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"objectId"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">create</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.save(role);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CachePut</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"objectId"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">update</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleRepository.save(role);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@CacheEvict</span>(value = <span class="string">"mysql:findById:role"</span>, keyGenerator = <span class="string">"simpleKey"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        roleRepository.delete(id);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用MongoDB"><a href="#使用MongoDB" class="headerlink" title="使用MongoDB"></a>使用MongoDB</h5><p>MongoDB是文档型的NoSQL数据库，具有大数据量、高并发等优势，但缺点是不能建立实体关系，而且也没有事务管理机制。</p>
<p>MongoDB 也有像使用JPA那样的资源库，引入spring-data-mongodb和spring-boot-starter-hateoas依赖库，这里就不过多介绍了。</p>
<h5 id="使用Neo4j"><a href="#使用Neo4j" class="headerlink" title="使用Neo4j"></a>使用Neo4j</h5><p>Neo4j是一个高性能的NoSQL图数据库，并且具备完全事务特性，同时具备传统关系型数据库的优点，又具备NOSQL数据库优势。</p>
<p>Neo4j将结构化数据存储在一张图上，图中每一个节点的属性表示数据的内容，每一条有向边表示数据的关系。它没有表结构的概念，它的数据用节点的属性来表示。</p>
<p>举个例子，现在有演员和电影两个实体，它们的关系表现为一个演员在一部电影中扮演一个角色。那么就可以创建演员和电影两个节点实体，和一个角色关系实体。<br><img src="http://oc3r3rke2.bkt.clouddn.com/15190491796642.jpg" alt="Neo4j举例"></p>
<p>它更加形象和贴切地表现了实体之间的关系，而且这个实体-关系模型是可以不经过任何转换而直接存入数据库的，这将很大程度上减轻设计工作和沟通成本。</p>
<p>像JPA使用了ORM一样，Neo4j使用了对象-图形映射OGM的方式来建模。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RelationshipEntity</span>(type = <span class="string">"ACTS_IN"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123; </span><br><span class="line">    <span class="meta">@GraphId</span> </span><br><span class="line">    Long id;</span><br><span class="line">    String role;</span><br><span class="line">    <span class="meta">@StartNode</span> </span><br><span class="line">    Actor actor;</span><br><span class="line">    <span class="meta">@EndNode</span> </span><br><span class="line">    Movie movie;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(Actor actor, Movie movie, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.actor = actor;</span><br><span class="line">        <span class="keyword">this</span>.movie = movie;</span><br><span class="line">        <span class="keyword">this</span>.role = name;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面的介绍可以看出，在Spring Boot框架中使用数据库非常简单、容易，主要得益于Spring Boot资源库的强大功能，Spring Boot整合了第三方资源，把复杂的操作变成简单的调用。</p>
</blockquote>
<h4 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h4><p>本章使用Spring Boot框架设计Web显示界面，使用MVC的概念将数据管理、事件控制、界面显示进行分层处理，实现多层结构设计。使用过MVC框架的比较好理解，这里就不过多说明了。</p>
<p>其中界面显示使用Thymeleaf模板，之前没接触过，简单说明下。Thymeleaf是现代化服务器端的Java模板引擎，不同与JSP和FreeMarker，Thymeleaf的语法更加接近HTML，并且也有不错的扩展性。</p>
<h4 id="提高数据库访问性能"><a href="#提高数据库访问性能" class="headerlink" title="提高数据库访问性能"></a>提高数据库访问性能</h4><p>使用关系型数据库的应用系统的性能瓶颈最终还是数据库。本章通过以下几种方式提高数据库访问性能:</p>
<ul>
<li>使用Druid</li>
<li>扩展JPA功能</li>
<li>使用Redis做缓存</li>
</ul>
<h5 id="使用Druid"><a href="#使用Druid" class="headerlink" title="使用Druid"></a>使用Druid</h5><p>Druid是一个关系型数据库连接池，是阿里巴巴的一个开源项目，在监控、可扩展性、稳定性和性能方面具有明显的优势。通过使用Druid连接池，可以一定程度上提高数据库的访问性能。</p>
<h5 id="扩展JPA功能"><a href="#扩展JPA功能" class="headerlink" title="扩展JPA功能"></a>扩展JPA功能</h5><p>使用JPA，在资源库接口定义中不但可以按照其规则约定的方法声明各种方法，还可以使用注解@Query来定义一些简单的查询语句，优化SQL语句。</p>
<p>可以通过自定义一个接口，继承于JpaRepository，扩展已有的JPA接口。自定义接口必须在程序启动时装配，才能正常使用。然后，在JPA配置类中，通过@EnableJpaRepositories加载定义的装配类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ExpandJpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select t from User t where t.name =?1 and t.email =?2"</span>)</span><br><span class="line">    <span class="function">User <span class="title">findByNameAndEmail</span><span class="params">(String name, String email)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Query</span>(<span class="string">"select t from User t where t.name like :name"</span>)</span><br><span class="line">    <span class="function">Page&lt;User&gt; <span class="title">findByName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, Pageable pageRequest)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用Redis做缓存"><a href="#使用Redis做缓存" class="headerlink" title="使用Redis做缓存"></a>使用Redis做缓存</h5><p>前面「使用Redis」已经介绍。</p>
<h4 id="安全设计"><a href="#安全设计" class="headerlink" title="安全设计"></a>安全设计</h4><p>Web应用的安全管理，主要包括两个方面的内容：一方面是用户身份验证，即用户登录的设计；另一方面是用户授权，即一个用户在一个应用系统中能够执行哪些操作的权限管理。</p>
<p>权限管理的设计一般使用角色来管理，给一个用户赋予哪些角色，用户就具有哪些权限。本章主要使用spring-cloud-security来进行安全管理设计。</p>
<p>使用时，需要继承spring-cloud-starter-parent，并引入spring-cloud-starter-security依赖。</p>
<p>关于系统的安全管理及各种设计，Spring Security已经大体上都实现了，只需要进行一些配置和引用，就能够正常使用了。具体实现就不在此重复描述了。</p>
<blockquote>
<p>好多实现细节，我没有展现出来，一方面会显得篇幅太长，主次不鲜明，另一方面作者把所有代码都放到github了（<a href="https://github.com/chenfromsz?tab=repositories" target="_blank" rel="noopener">http://github.com/chenfromsz</a>）。后续在公司项目中实践好，我再谈谈自己的使用经验。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018年公众号文章计划]]></title>
      <url>https://qqdong.github.io/2018/02/18/2018%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>18年，无论是工作还是生活，都将更忙，今年是很关键的一年。</p>
<p>公司业务发展迅猛，对人才的培养也很重视，自己要跟上公司的步伐，在技术和管理上更进一步。</p>
<p>为了充分利用业余时间，把平时看视频、无意义的熬夜时间，用在「写公众号文章」，将自己的技术学习、业务实现进行总结、分享，让自己更充实，更有动力。</p>
<p>书上得来终觉浅，将学习的技术与业务实现相结合，相互促进。</p>
<p>希望大家关注我，给我一些动力，18年一起进步。</p>
<a id="more"></a>
<h4 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h4><p>18年想对一些技术深入研究，当然，都是与项目相关的技术，会介绍在实际项目中的应用。</p>
<p>会更加关注团队管理和协作，有意识地去学习相关知识，向身边优秀的同事学习。</p>
<p>下面从技术、业务实现、团队协作列举将要写的内容。</p>
<h5 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h5><ul>
<li>CAS 单点登录</li>
<li>Shiro 权限控制</li>
<li>多线程开发</li>
<li>Spring Boot 实践</li>
<li>Netty 源码探究</li>
</ul>
<h5 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h5><ul>
<li>分布式会话实现（多系统）</li>
<li>多语言实现</li>
<li>多租户多时区实现</li>
<li>消息平台实现</li>
<li>项目重构和服务化</li>
</ul>
<h5 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h5><ul>
<li>编码规范</li>
<li>代码review</li>
<li>工作流规范推进</li>
<li>团队沟通和协作     </li>
</ul>
<h4 id="执行方案"><a href="#执行方案" class="headerlink" title="执行方案"></a>执行方案</h4><p>有想法就迈出了第一步，希望自己能够坚持执行，执行过程中要遵从基本的原则，规划好时间。</p>
<h5 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h5><ul>
<li>学习的技术要与项目相关，一方面使项目更好的完成，一方面加深对相关技术的理解；</li>
<li>以公司项目为重心，全身心投入，利用空余时间学习、总结相关技术，编写公众号文章；</li>
<li>一定要尽最大努力保证文章质量，让自己满意；</li>
</ul>
<h5 id="时间规划"><a href="#时间规划" class="headerlink" title="时间规划"></a>时间规划</h5><p>18年初，我的小孩要出生了，将会投入许多时间。16年底，我报了人大在职研究生，周六还要去上课。    </p>
<p>平时应该少看电视视频，多锻炼，保持持好精神状态。   </p>
<p>希望自己能做到：</p>
<ul>
<li>每周至少产出一篇文章，特殊情况除外；</li>
<li>每天晚上、周六日，抽出时间学习、总结相关技术；</li>
</ul>
]]></content>
      
        <categories>
            
            <category> summary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> plan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[1718总结与计划]]></title>
      <url>https://qqdong.github.io/2018/02/16/summary-2018/</url>
      <content type="html"><![CDATA[<p>2018年已经悄然到来，回望过去一年，收获很多，感恩很多；未来一年，内心充满了期待，无论是工作还是生活，将会发生很大变化。大年初一的晚上，将自己的所思所想记录下来，与大家分享，激励自己18年更努力。</p>
<h4 id="17年总结"><a href="#17年总结" class="headerlink" title="17年总结"></a>17年总结</h4><p>我目前就职于小米，在『小米网智能客服项目』从事开发工作，项目主要包含在线客服、智能机器人、智能数据分析三大块，另外还包括热线、邮件、工单等模块。    </p>
<p>16年3月份，我加入这个团队，当时就4个人，每个人负责多个子项目。经过了解，项目初期想做的功能很多，设计的比较大，很多人投入进来，形成了很多个子服务。所以17年上半年之前，我一直在维护项目，解决线上的一些问题，实现业务的一些小需求。另外，当时小米的管理比较扁平化，项目管理和团队管理也不是很规范，自己也比较松散，技术和团队协作能力提升的都比较少。</p>
<p>17年下半年，小米发展增速明显，国内和国外的业绩都有了很大提升。管理上也开始重视起来，招了很多项目经理，『小米网智能客服项目』有了产品功能规划，开发团队也慢慢扩大，慢慢变得好起来。</p>
<p>还有一点对我影响很大，我们团队的开发负责人，17年中旬加入进来，有10多年的开发、管理经验，从他身上，在任务规划、执行力、团队协作上学到了很多。</p>
<p>下面从主要工作、线上问题处理、规划执行能力、家庭几个方面总结自己过去的一年。</p>
<a id="more"></a>
<h5 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h5><p>我主要负责在线客服，使用到的主要技术点：</p>
<ul>
<li>NIO</li>
<li>多线程</li>
<li>WebSocket协议</li>
<li>会话状态管理</li>
<li>CAS单点登录</li>
<li>Shiro权限控制</li>
</ul>
<p>使用到的主要框架和组件：</p>
<ul>
<li>SSM</li>
<li>Redis</li>
<li>RabbitMQ</li>
<li>ZooKeeper</li>
<li>Thrift</li>
</ul>
<h6 id="消息平台"><a href="#消息平台" class="headerlink" title="消息平台"></a>消息平台</h6><p>在线客服最重要的一点是保证用户和客服能够在线沟通，类似于IM。现有系统缺少消息确认、重发机制，多终端消息同步也不支持，17年在技术负责人的指导下，重构了『在线实时聊天』模块，进行了抽象，变为通用的『消息平台』：</p>
<ul>
<li>长连接接入层还是使用netty实现的websocket通道，比之前更通用，扩展其他协议也很方便，另外可支持多实例部署，随时重启；</li>
<li>消息存储层，为了方便，使用MySQL+Redis进行存储，保证了消息的有循序，实现了消息确认和重发机制；</li>
</ul>
<p>有点遗憾的是，17年下半年规划需求比较多且比较紧急，人也比较少，没能够正式上线，18年一定要推进上线。</p>
<h6 id="maven依赖统一管理-amp-工具类封装"><a href="#maven依赖统一管理-amp-工具类封装" class="headerlink" title="maven依赖统一管理&amp;工具类封装"></a>maven依赖统一管理&amp;工具类封装</h6><p>前面说到，项目有很多子服务，每个服务maven的配置都很相似，更新维护都要修改所有的服务，不是很方便。经过调研和思考，决定将公共的依赖、版本声明、构建过程、maven插件统一管理，抽象出一个parent pom。</p>
<p>maven本身就支持parent pom，每个子项目只需声明下继承父pom，就可以直接声明需要的依赖，不需要再声明版本，构建过程。</p>
<p>另外，将公司其他组的一些工具类，也声明在父pom中。客服项目特有的一些工具类移到父pom所在项目，并在父pom中声明。</p>
<h6 id="国内和海外代码分支合并"><a href="#国内和海外代码分支合并" class="headerlink" title="国内和海外代码分支合并"></a>国内和海外代码分支合并</h6><p>因历史原因，国内和海外代码分支是不同的分支，海外的功能较国内相对较少，而且海外有近1年未更新了。一次，业务提出一个海外需求，该需求在国内分支已经实现。经过确认，海外有的功能，国内都有，而且交互和操作都相同，只是一些基础存储组件不同。最终决定，合并国内和海外分支，方便以后功能扩展，节约开发时间和维护成本。</p>
<p>升级过程熬了2个通宵（不是连续的），过程在此就不详细描述了，简单总结下：   </p>
<ul>
<li>大的变更上线前，一定要做好回滚预案， 升级失败可及时回滚，不影响现有业务；</li>
<li>条件允许，最好有预上线环境，尽量完全模拟线上，因为海外网络结构比较复杂，虽然测试环境测试正常，上线后可能出现各种问题；</li>
<li>上线时，相关人都要在场，有问题时及时协调处理；</li>
</ul>
<h6 id="推进协作开发规范"><a href="#推进协作开发规范" class="headerlink" title="推进协作开发规范"></a>推进协作开发规范</h6><p>相信大部分团队都在使用git进行代码版本控制，但真正用好git，多人协作开发一个项目，需要规定一套工作流规范。</p>
<p>我借鉴网上比较流行的git flow规范，形成了相关规范，对各种场景的使用进行了说明，并做了一次分享，现在已经在项目中试运行，明年会加强推进。</p>
<blockquote>
<p>扩展阅读：</p>
</blockquote>
<ul>
<li><a href="http://git.oschina.net/progit/3-Git-%E5%88%86%E6%94%AF.html" target="_blank" rel="noopener">分支系统介绍</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html#getting_started" target="_blank" rel="noopener">git-flow工具</a></li>
</ul>
<h5 id="线上问题处理"><a href="#线上问题处理" class="headerlink" title="线上问题处理"></a>线上问题处理</h5><p>问题处理也是很重要的能力，更能提现一个人的能力，遇到问题时，首先不要排斥，它是提升自己能力的一个机会，问题解决后，要进行总结回顾，下次遇到相似问题时可以快速定位和处理。</p>
<p>17年遇到了不少问题，下面列举2个问题总结（当时总结的）。</p>
<h6 id="测试环境-客服端无法访问"><a href="#测试环境-客服端无法访问" class="headerlink" title="测试环境-客服端无法访问"></a>测试环境-客服端无法访问</h6><ul>
<li>问题描述 <ul>
<li>浏览器访问测试环境客服端时，直接提示502错误，后台服务不可用;</li>
</ul>
</li>
<li>排查过程<ul>
<li>查看resin服务器日志和程序日志，未发现异常;</li>
<li>查看cpu指标，未发现异常;</li>
<li>查看jvm内存使用情况、垃圾回收情况，未发现异常;</li>
<li>查看jvm栈，发现有好多线程在同一处等待数据库资源，可能数据库资源已被耗尽;</li>
<li>重点关注“线程等待的代码”，打开数据库连接池日志，在本地尝试复现;</li>
<li>同事在本地复现，发现调用snaker（一个开源的工作流框架）的一些方法时，占用很多连接， 用完后并没有释放;</li>
<li>同事通过review代码，发现，在Service类加上Spring事务管理器后，问题解决;</li>
<li>通过查看snaker源码，snaker在处理工作流时，旨在最后一次操作还回连接，如果未开启事务管理， 会获取多个连接，但仅释放最后一次连接，导致连接泄漏;</li>
</ul>
</li>
<li>总结<ul>
<li>排查问题时，不应太着急，理清思路，一步步进行排查;</li>
<li>珍视排查问题的机会，从中会学到很多;</li>
</ul>
</li>
</ul>
<h6 id="海外正式环境-ip白名单问题"><a href="#海外正式环境-ip白名单问题" class="headerlink" title="海外正式环境-ip白名单问题"></a>海外正式环境-ip白名单问题</h6><ul>
<li>问题处理过程<ul>
<li>2018/02/04，发现时常有提示【ip禁止访问】的问题，当时觉得可能自己的网络不稳定，没有在意；</li>
<li>2018/02/05，业务开始反馈多个客服出现【ip禁止访问】的问题，我和同事开始介入排查；</li>
<li>尝试重启服务解决这个问题，但无效；</li>
<li>临时关闭ip白名单功能，让业务可以正常使用；</li>
<li>2018/02/06上午，我尝试开启ip白名单功能，但还是出现【ip禁止访问的问题】;但发现服务端打印的访问者(我的内网机器)ip和我真实的不同；（curl cip.cc）</li>
<li>把发现的情况告诉运维，运维开始排查；</li>
<li>2018/02/06下午，4点半左右，运维定位到问题:信息部将某个域名公网IP转发到专线出口，说是为了解决国内到新加坡走国际链路慢的问题;</li>
<li>5点半左右，我添加对应的网段到ip白名单中，开启ip白名单功能；</li>
<li>后续观察，问题解决；</li>
</ul>
</li>
<li>总结<ul>
<li>不放过一个异常的现象，也不排斥和害怕处理这些问题；<ul>
<li>明确：线上问题处理能力是很重要的能力；</li>
<li>整体上分析问题出现的可能原因；</li>
</ul>
</li>
<li>如果线上一直运行正常，突然某个功能不可用，就要考虑外部的一些因素了，尤其是网络；</li>
</ul>
</li>
</ul>
<h5 id="规划执行能力"><a href="#规划执行能力" class="headerlink" title="规划执行能力"></a>规划执行能力</h5><p>从团队负责人身上，获益最大的就是规划执行能力，让我做事有条不紊，有始有终，更充实、更有效。</p>
<p>下面分享下我们团队和我的规划执行过程</p>
<ul>
<li>每月初进行月度总结和规划；</li>
<li>每周四下午填写周报，我会详细总结上周计划完成情况、下周计划；（特别重要，会特别认真填写）</li>
<li>每周五进行进行周会；</li>
<li>每周五，我会把下周主要工作同步到outlook日历中，细分每一天的任务；</li>
<li>协作过程<ul>
<li>接到需求后，产品先进行分析，给出产品文档和初步的原型设计；</li>
<li>开发阅读和理解产品文档，记录下疑问；</li>
<li>产品和开发一起参加需求确认人，对一些细节和疑问进行讨论，确定最终的需求和原型；</li>
</ul>
</li>
<li>其他<ul>
<li>团队任务使用teambition进行管理，可查看团队所有任务；</li>
<li>重点任务，每天下班前会进行沟通，确保任务按计划执行；</li>
</ul>
</li>
</ul>
<p>我严格执行了上面的过程，获益良多。</p>
<h5 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h5><p>篇幅原因，就不多说了，总结两点：</p>
<ul>
<li>老婆辛苦了，怀了小宝宝，我没能好好照顾你，感谢你的包容；</li>
<li>感谢丈母娘，专门辞去工作照顾你的女儿，辛苦了；</li>
</ul>
<h4 id="18年计划"><a href="#18年计划" class="headerlink" title="18年计划"></a>18年计划</h4><h5 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h5><p>我会深入学习以下相关技术：</p>
<ul>
<li>即时通讯</li>
<li>NIO</li>
<li>消息系统</li>
<li>分布式缓存</li>
<li>spring boot</li>
<li>数据分析</li>
</ul>
<h5 id="管理能力"><a href="#管理能力" class="headerlink" title="管理能力"></a>管理能力</h5><p>18年，我将带个小组，多花精力在管理上，阅读相关数据，向身边优秀的人多学习，加强小组、部门间的协作沟通。</p>
<h5 id="家庭-1"><a href="#家庭-1" class="headerlink" title="家庭"></a>家庭</h5><p>3月份，我的宝宝就要出生了，我会多花点时间学习如何与她沟通。<br>老婆会更辛苦，我会多包容她，陪着她。</p>
]]></content>
      
        <categories>
            
            <category> summary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> summary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo使用七牛作为文件存储]]></title>
      <url>https://qqdong.github.io/2018/02/16/hexo-qiniu-pic/</url>
      <content type="html"><![CDATA[<h3 id="注册七牛账号"><a href="#注册七牛账号" class="headerlink" title="注册七牛账号"></a>注册七牛账号</h3><p>进入 <a href="https://portal.qiniu.com/signup?code=3ldwahs7n653m" target="_blank" rel="noopener">七牛</a> 官网注册账号</p>
<h3 id="安装hexo七牛插件"><a href="#安装hexo七牛插件" class="headerlink" title="安装hexo七牛插件"></a>安装hexo七牛插件</h3><p>插件地址：<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">点击</a></p>
<p>文档说明比较全，按照README.md文件一步一步安装、配置即可</p>
<h3 id="本地上传图片"><a href="#本地上传图片" class="headerlink" title="本地上传图片"></a>本地上传图片</h3><p>hexo qiniu sync<br><em>同步本地图片到七牛</em></p>
<p>hexo qiniu sync2<br><em>增加同步上传那些本地与七牛空间有差异的文件</em></p>
<a id="more"></a>
<h3 id="在md文件中使用图片"><a href="#在md文件中使用图片" class="headerlink" title="在md文件中使用图片"></a>在md文件中使用图片</h3><p>{ % qnimg test/demo.png title:图片标题 alt:图片说明 ‘class:class1 class2’  % }<br>其中是qnimg是七牛插件定义的标签</p>
<p>附上是我的配置<br><img title="七牛插件配置" alt="七牛插件配置" src="http://oc3r3rke2.bkt.clouddn.com/static/images/blog/hexo-qiniu-config.png"></p>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> qiniu </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
